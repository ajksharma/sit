From 3510fe31446c857db277b0182bdb5d90c3e14e7b Mon Sep 17 00:00:00 2001
From: Yurii Rashkovskii <me@yrashk.com>
Date: Mon, 7 May 2018 14:12:44 -0700
Subject: [PATCH] Problem: systems where gpg and gpg2 are different GnuPGs

On some systems, gpg would be GnuPG 1.x and gpg2 would be GnuPG 2.x.

This causes SIT to fail as it expects 2.x-compatible binary

Solution: try gpg2 first, and fall back to gpg
---
 Cargo.lock                | 1 +
 sit-web/Cargo.toml        | 1 +
 sit-web/src/main.rs       | 2 ++
 sit-web/src/webapp.rs     | 4 +++-
 sit/src/command_record.rs | 3 ++-
 sit/src/main.rs           | 3 ++-
 6 files changed, 11 insertions(+), 3 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index dfc6cb4..6bd1129 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1132,6 +1132,7 @@ dependencies = [
  "sit-core 0.4.0",
  "tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)",
  "tempfile 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "which 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "xdg 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
diff --git a/sit-web/Cargo.toml b/sit-web/Cargo.toml
index 56689bb..b49ff6b 100644
--- a/sit-web/Cargo.toml
+++ b/sit-web/Cargo.toml
@@ -24,6 +24,7 @@ rayon = "1.0"
 digest = "0.7"
 blake2 = "0.7"
 hex = "0.3"
+which = "2.0"
 sit-core = { path = "../sit-core", version = "0.4.0", features = ["git"] }
 
 [build-dependencies]
diff --git a/sit-web/src/main.rs b/sit-web/src/main.rs
index daa1662..41787f9 100644
--- a/sit-web/src/main.rs
+++ b/sit-web/src/main.rs
@@ -38,6 +38,8 @@ extern crate hex;
 extern crate mime_guess;
 mod webapp;
 
+extern crate which;
+
 fn main() {
     #[cfg(unix)]
     let xdg_dir = xdg::BaseDirectories::with_prefix("sit").unwrap();
diff --git a/sit-web/src/webapp.rs b/sit-web/src/webapp.rs
index 4967fc7..f063307 100644
--- a/sit-web/src/webapp.rs
+++ b/sit-web/src/webapp.rs
@@ -80,6 +80,8 @@ use hex;
 
 use serde_json;
 
+use which::which;
+
 fn path_to_response<P: Into<PathBuf>>(path: P, request: &Request) -> Response {
     let path: PathBuf = path.into();
 
@@ -266,7 +268,7 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
               use std::io::Write;
               let program = match config.signing.gnupg {
                            Some(ref command) => command.clone(),
-                           None => String::from("gpg"),
+                           None => which("gpg2").or_else(|_| which("gpg")).unwrap_or(PathBuf::from("gpg")).to_str().unwrap().into(),
               };
               let key = match config.signing.key.clone() {
                   Some(key) => Some(OsString::from(key)),
diff --git a/sit/src/command_record.rs b/sit/src/command_record.rs
index bfc9282..500cbdf 100644
--- a/sit/src/command_record.rs
+++ b/sit/src/command_record.rs
@@ -10,6 +10,7 @@ use tempfile;
 use atty;
 use tempdir;
 use serde_json;
+use which::which;
 
 pub fn command<P: AsRef<Path>, P1: AsRef<Path>>(matches: &ArgMatches, repo: &Repository, mut config: Configuration, working_directory: P, config_path: P1) -> i32 {
     if !matches.is_present("no-author") && config.author.is_none() {
@@ -127,7 +128,7 @@ pub fn command<P: AsRef<Path>, P1: AsRef<Path>>(matches: &ArgMatches, repo: &Rep
                 let program = OsString::from(matches.value_of("gnupg").map(String::from)
                     .unwrap_or(match config.signing.gnupg {
                         Some(ref command) => command.clone(),
-                        None => String::from("gpg"),
+                        None => which("gpg2").or_else(|_| which("gpg")).unwrap_or(PathBuf::from("gpg")).to_str().unwrap().into(),
                     }));
                 let key = match matches.value_of("signing-key").map(String::from).or_else(|| config.signing.key.clone()) {
                     Some(key) => Some(OsString::from(key)),
diff --git a/sit/src/main.rs b/sit/src/main.rs
index dfc209e..de4c250 100644
--- a/sit/src/main.rs
+++ b/sit/src/main.rs
@@ -49,6 +49,7 @@ extern crate question;
 extern crate dunce;
 
 extern crate which;
+use which::which;
 
 use std::collections::HashMap;
 fn get_named_expression<S: AsRef<str>>(name: S, repo: &sit_core::Repository,
@@ -472,7 +473,7 @@ fn main_with_result(allow_external_subcommands: bool) -> i32 {
                                    let program = OsString::from(matches.value_of("gnupg").map(String::from)
                                        .unwrap_or(match config.signing.gnupg {
                                            Some(ref command) => command.clone(),
-                                           None => String::from("gpg"),
+                                           None => which("gpg2").or_else(|_| which("gpg")).unwrap_or(PathBuf::from("gpg")).to_str().unwrap().into(),
                                        }));
                                    let mut command = ::std::process::Command::new(program);
 
-- 
2.16.2

