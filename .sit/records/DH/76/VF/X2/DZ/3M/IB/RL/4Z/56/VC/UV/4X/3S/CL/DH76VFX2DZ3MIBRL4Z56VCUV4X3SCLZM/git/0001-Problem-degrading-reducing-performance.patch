From b1f1d1e3d8d66580da1088d058ff5f878000d97a Mon Sep 17 00:00:00 2001
From: Yurii Rashkovskii <me@yrashk.com>
Date: Mon, 12 Feb 2018 00:12:39 +0700
Subject: [PATCH] Problem: degrading reducing performance

With either growing number of issues or introduction
of more complex reducers, the performance starts going
down significantly.

Solution: enable parallel reduction of issues

Since issues are independent trees of records, there's
not much reason to process each issue sequentially.

As a part of this solution, we needed to avoid re-compiling
reducer functions for every individual instance of `DuktapeReducer`
as that is often cost-prohibitive. This is accomplished
by allowing cloning `DuktapeReducer` in which it'll copy
saved bytecode for functions as well as the state these functions
had.
---
 Cargo.lock                       |  41 +++++++++++++
 sit-core/src/issue.rs            |   2 +-
 sit-core/src/reducers/duktape.rs | 128 +++++++++++++++++++++++++++++++++------
 sit-core/src/reducers/mod.rs     |   6 +-
 sit-web/Cargo.toml               |   3 +-
 sit-web/src/main.rs              |   2 +
 sit-web/src/webapp.rs            |  35 ++++++-----
 sit/Cargo.toml                   |   1 +
 sit/src/main.rs                  |  49 +++++++++------
 9 files changed, 210 insertions(+), 57 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index 0c79115..be03835 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -179,6 +179,15 @@ dependencies = [
  "vec_map 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "coco"
+version = "0.1.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "either 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "config"
 version = "0.8.0"
@@ -682,6 +691,27 @@ dependencies = [
  "winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "rayon"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "either 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rayon-core 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
+[[package]]
+name = "rayon-core"
+version = "1.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "coco 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
+ "lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)",
+ "libc 0.2.36 (registry+https://github.com/rust-lang/crates.io-index)",
+ "num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rand 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "redox_syscall"
 version = "0.1.37"
@@ -760,6 +790,11 @@ name = "safemem"
 version = "0.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "scopeguard"
+version = "0.3.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "serde"
 version = "0.8.23"
@@ -852,6 +887,7 @@ dependencies = [
  "glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)",
  "jmespath 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "pbr 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rayon 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)",
  "serde_json 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)",
  "sit-core 0.1.0",
@@ -897,6 +933,7 @@ dependencies = [
  "jmespath 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "mime_guess 1.8.3 (registry+https://github.com/rust-lang/crates.io-index)",
+ "rayon 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "rouille 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)",
  "serde_json 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1222,6 +1259,7 @@ dependencies = [
 "checksum chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "7c20ebe0b2b08b0aeddba49c609fe7957ba2e33449882cb186a180bc60682fa9"
 "checksum chunked_transfer 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)" = "498d20a7aaf62625b9bf26e637cf7736417cde1d0c99f1d04d1170229a85cf87"
 "checksum clap 2.29.4 (registry+https://github.com/rust-lang/crates.io-index)" = "7b8f59bcebcfe4269b09f71dab0da15b355c75916a8f975d3876ce81561893ee"
+"checksum coco 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)" = "c06169f5beb7e31c7c67ebf5540b8b472d23e3eade3b2ec7d1f5b504a85f91bd"
 "checksum config 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)" = "e595d1735d8ab6b04906bbdcfc671cce2a5e609b6f8e92865e67331cc2f41ba4"
 "checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e"
 "checksum crypto-mac 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)" = "0999b4ff4d3446d4ddb19a63e9e00c1876e75cd7000d20e57a693b4b3f08d958"
@@ -1286,6 +1324,8 @@ dependencies = [
 "checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)" = "7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a"
 "checksum rand 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)" = "15a732abf9d20f0ad8eeb6f909bf6868722d9a06e1e50802b6a70351f40b4eb1"
 "checksum rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)" = "eba5f8cb59cc50ed56be8880a5c7b496bfd9bd26394e176bc67884094145c2c5"
+"checksum rayon 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)" = "ed02d09394c94ffbdfdc755ad62a132e94c3224a8354e78a1200ced34df12edf"
+"checksum rayon-core 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)" = "e64b609139d83da75902f88fd6c01820046840a18471e4dfcd5ac7c0f46bea53"
 "checksum redox_syscall 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)" = "0d92eecebad22b767915e4d529f89f28ee96dbbf5a4810d2b844373f136417fd"
 "checksum redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)" = "7e891cfe48e9100a70a3b6eb652fef28920c117d366339687bd5576160db0f76"
 "checksum regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)" = "4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f"
@@ -1295,6 +1335,7 @@ dependencies = [
 "checksum rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)" = "aee45432acc62f7b9a108cc054142dac51f979e69e71ddce7d6fc7adf29e817e"
 "checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)" = "dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda"
 "checksum safemem 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "e27a8b19b835f7aea908818e871f5cc3a5a186550c30773be987e155e8163d8f"
+"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27"
 "checksum serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)" = "9dad3f759919b92c3068c696c15c3d17238234498bbdcc80f2c469606f948ac8"
 "checksum serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)" = "db99f3919e20faa51bb2996057f5031d8685019b5a06139b1ce761da671b8526"
 "checksum serde-hjson 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)" = "7a2376ebb8976138927f48b49588ef73cde2f6591b8b3df22f4063e0f27b9bec"
diff --git a/sit-core/src/issue.rs b/sit-core/src/issue.rs
index 26835d1..cd635f8 100644
--- a/sit-core/src/issue.rs
+++ b/sit-core/src/issue.rs
@@ -49,7 +49,7 @@ pub trait IssueReduction: Issue {
     /// Will insert issue's `id` into the initial state
     ///
     /// [`Reducer`]: ../reducers/trait.Reducer.html
-    fn reduce_with_reducer<R: Reducer<State=Map<String, Value>, Item=Self::Record>>(&self, reducer: &R) -> Result<Map<String, Value>, ReductionError<Self::Error>> {
+    fn reduce_with_reducer<R: Reducer<State=Map<String, Value>, Item=Self::Record>>(&self, reducer: &mut R) -> Result<Map<String, Value>, ReductionError<Self::Error>> {
         let records = self.record_iter()?;
         let mut state: Map<String, Value> = Default::default();
         state.insert("id".into(), Value::String(self.id().into()));
diff --git a/sit-core/src/reducers/duktape.rs b/sit-core/src/reducers/duktape.rs
index 10be811..397ec66 100644
--- a/sit-core/src/reducers/duktape.rs
+++ b/sit-core/src/reducers/duktape.rs
@@ -17,11 +17,14 @@ use memmap;
 pub struct DuktapeReducer<'a, R: Record> {
     repository: &'a ::Repository,
     context: *mut duktape::duk_context,
-    reducers: usize,
+    reducers: i32,
     filenames: Vec<PathBuf>,
     phantom_data: PhantomData<R>,
+    functions: Vec<Vec<u8>>,
 }
 
+unsafe impl<'a, R: Record> Send for DuktapeReducer<'a, R> {}
+
 #[derive(Debug, Error)]
 pub enum Error {
     IoError(::std::io::Error),
@@ -53,6 +56,7 @@ impl<'a, R: Record> DuktapeReducer<'a, R> {
         let paths = glob::glob(repository.path().join(".reducers/*.js").to_str().unwrap()).unwrap();
         let mut reducers = 0;
         let mut filenames = vec![];
+        let mut functions = vec![];
         for file in paths.filter(Result::is_ok).map(Result::unwrap) {
             reducers += 1;
             unsafe {
@@ -86,6 +90,16 @@ impl<'a, R: Record> DuktapeReducer<'a, R> {
                     duktape::duk_pop_2(context);
                     // f
                     duktape::duk_require_function(context, -1);
+                    // save bytecode
+                    duktape::duk_push_null(context);
+                    duktape::duk_copy(context, -2, -1);
+                    duktape::duk_dump_function(context);
+                    let mut sz = 0;
+                    let data = duktape::duk_get_buffer(context, -1, &mut sz);
+                    let mut func = vec![0; sz];
+                    ptr::copy_nonoverlapping(data, func.as_mut_ptr() as *mut _, sz);
+                    functions.push(func);
+                    duktape::duk_pop(context);
                 }
 
                 // create reducer's state
@@ -99,6 +113,7 @@ impl<'a, R: Record> DuktapeReducer<'a, R> {
             context,
             reducers,
             filenames,
+            functions,
             phantom_data: PhantomData,
         })
     }
@@ -112,18 +127,54 @@ impl<'a, R: Record> DuktapeReducer<'a, R> {
         for i in 0..self.reducers {
             unsafe {
                 duktape::duk_push_object(self.context);
-                duktape::duk_swap_top(self.context,(i * 2 + 1) as i32);
+                duktape::duk_swap_top(self.context,i * 2 + 1);
                 duktape::duk_pop(self.context);
             }
         }
     }
+
+
 }
 
+impl<'a, R: Record> Clone for DuktapeReducer<'a, R> {
+    fn clone(&self) -> Self {
+        let context = unsafe {
+            duktape::duk_create_heap(None, None, None,ptr::null_mut(), Some(fatal_handler))
+        };
+
+        unsafe {
+            for (i, func) in self.functions.iter().enumerate() {
+                // load bytecode
+                duktape::duk_push_buffer_raw(context, 0, duktape::DUK_BUF_FLAG_DYNAMIC | duktape::DUK_BUF_FLAG_EXTERNAL);
+                duktape::duk_config_buffer(context, -1, func.as_ptr() as *mut _, func.len());
+                duktape::duk_load_function(context);
+                // transfer state
+                duktape::duk_push_null(self.context);
+                duktape::duk_copy(self.context, (i * 2 + 1) as i32, -1);
+                duktape::duk_json_encode(self.context, -1);
+                let state = duktape::duk_get_string(self.context, -1);
+                duktape::duk_pop(self.context);
+                duktape::duk_push_string(context, state);
+                duktape::duk_json_decode(context, -1);
+            }
+        }
+        DuktapeReducer {
+            repository: self.repository,
+            context,
+            reducers: self.reducers,
+            filenames: self.filenames.clone(),
+            functions: self.functions.clone(),
+            phantom_data: PhantomData,
+        }
+    }
+}
+
+
 impl<'a, R: Record> Reducer for DuktapeReducer<'a, R> {
     type State = Map<String, JsonValue>;
     type Item = R;
 
-    fn reduce(&self, mut state: Self::State, item: &Self::Item) -> Self::State {
+    fn reduce(&mut self, mut state: Self::State, item: &Self::Item) -> Self::State {
         use serde_json;
 
         let json = serde_json::to_string(&JsonValue::Object(state.clone())).unwrap();
@@ -191,11 +242,11 @@ impl<'a, R: Record> Reducer for DuktapeReducer<'a, R> {
 
             for i in 0..self.reducers {
                 // function
-                duktape::duk_require_function(ctx, (i * 2) as i32);
-                duktape::duk_dup(ctx, (i * 2) as i32);
+                duktape::duk_require_function(ctx, i * 2);
+                duktape::duk_dup(ctx, i * 2);
                 // reducer's state
-                duktape::duk_require_object(ctx,(i * 2 + 1) as i32);
-                duktape::duk_dup(ctx, (i * 2 + 1) as i32);
+                duktape::duk_require_object(ctx,i * 2 + 1);
+                duktape::duk_dup(ctx, i * 2 + 1);
                 // issue state
                 duktape::duk_push_null(ctx);
                 duktape::duk_swap_top(ctx, -4);
@@ -220,7 +271,7 @@ impl<'a, R: Record> Reducer for DuktapeReducer<'a, R> {
                     {
                         let mut arr = state.entry(String::from("errors")).or_insert(JsonValue::Array(vec![]));
                         let mut error = Map::new();
-                        error.insert("file".into(), JsonValue::String(self.filenames[i].to_str().unwrap().into()));
+                        error.insert("file".into(), JsonValue::String(self.filenames[i as usize].to_str().unwrap().into()));
                         error.insert("error".into(), JsonValue::String(err.to_str().unwrap().into()));
                         arr.as_array_mut().unwrap().push(JsonValue::Object(error));
                     }
@@ -268,7 +319,7 @@ mod tests {
 
         let issue = repo.new_issue().unwrap();
         let record = issue.new_record(vec![(".type/SummaryChanged", &b""[..]), ("text", &b"Title"[..])].into_iter(), true).unwrap();
-        let state = issue.reduce_with_reducer(&DuktapeReducer::new(&repo).unwrap()).unwrap();
+        let state = issue.reduce_with_reducer(&mut DuktapeReducer::new(&repo).unwrap()).unwrap();
 
         assert_eq!(state.get("hello").unwrap(), &JsonValue::String(record.encoded_hash()));
     }
@@ -287,7 +338,7 @@ mod tests {
 
         let issue = repo.new_issue().unwrap();
         issue.new_record(vec![(".type/SummaryChanged", &b""[..]), ("text", &b"Title"[..])].into_iter(), true).unwrap();
-        let state = issue.reduce_with_reducer(&DuktapeReducer::new(&repo).unwrap()).unwrap();
+        let state = issue.reduce_with_reducer(&mut DuktapeReducer::new(&repo).unwrap()).unwrap();
 
         assert_eq!(state.get("hello").unwrap(), &JsonValue::String("Title".into()));
     }
@@ -318,7 +369,7 @@ mod tests {
         issue.new_record(vec![(".type/SummaryChanged", &b""[..]), ("text", &b"Title"[..])].into_iter(), true).unwrap();
         issue.new_record(vec![(".type/SummaryChanged", &b""[..]), ("text", &b"Title"[..])].into_iter(), true).unwrap();
 
-        let state = issue.reduce_with_reducer(&DuktapeReducer::new(&repo).unwrap()).unwrap();
+        let state = issue.reduce_with_reducer(&mut DuktapeReducer::new(&repo).unwrap()).unwrap();
 
         use serde_json::Number;
         assert_eq!(state.get("hello").unwrap(), &JsonValue::Number(Number::from(3)));
@@ -339,7 +390,7 @@ mod tests {
 
         let issue = repo.new_issue().unwrap();
         issue.new_record(vec![(".type/SummaryChanged", &b""[..]), ("text", &b"Title"[..])].into_iter(), true).unwrap();
-        let state = issue.reduce_with_reducer(&DuktapeReducer::new(&repo).unwrap()).unwrap();
+        let state = issue.reduce_with_reducer(&mut DuktapeReducer::new(&repo).unwrap()).unwrap();
 
         use serde_json::Number;
         assert_eq!(state.get("hello").unwrap(), &JsonValue::Number(Number::from(1)));
@@ -384,7 +435,7 @@ mod tests {
 
                 let issue = repo.new_issue().unwrap();
         issue.new_record(vec![(".type/SummaryChanged", &b""[..]), ("text", &b"Title"[..])].into_iter(), true).unwrap();
-        let state = issue.reduce_with_reducer(&DuktapeReducer::new(&repo).unwrap()).unwrap();
+        let state = issue.reduce_with_reducer(&mut DuktapeReducer::new(&repo).unwrap()).unwrap();
 
         assert!(state.get("errors").is_some());
         let errors = state.get("errors").unwrap().as_array().unwrap();
@@ -417,22 +468,65 @@ mod tests {
         issue.new_record(vec![(".type/SummaryChanged", &b""[..]), ("text", &b"Title"[..])].into_iter(), true).unwrap();
         issue.new_record(vec![(".type/SummaryChanged", &b""[..]), ("text", &b"Title"[..])].into_iter(), true).unwrap();
 
-        let reducer = DuktapeReducer::new(&repo).unwrap();
+        let mut reducer = DuktapeReducer::new(&repo).unwrap();
 
         use serde_json::Number;
 
-        let state = issue.reduce_with_reducer(&reducer).unwrap();
+        let state = issue.reduce_with_reducer(&mut reducer).unwrap();
         assert_eq!(state.get("hello").unwrap(), &JsonValue::Number(Number::from(3)));
 
         // run it again without touching the state
-        let state = issue.reduce_with_reducer(&reducer).unwrap();
+        let state = issue.reduce_with_reducer(&mut reducer).unwrap();
         assert_eq!(state.get("hello").unwrap(), &JsonValue::Number(Number::from(6)));
 
         // now, reset state
         reducer.reset_state();
 
-        let state = issue.reduce_with_reducer(&reducer).unwrap();
+        let state = issue.reduce_with_reducer(&mut reducer).unwrap();
         assert_eq!(state.get("hello").unwrap(), &JsonValue::Number(Number::from(3)));
     }
 
+    #[test]
+    fn cloned() {
+        let mut tmp = TempDir::new("sit").unwrap().into_path();
+        tmp.push(".sit");
+        let repo = Repository::new(tmp).unwrap();
+        use std::fs;
+        use std::io::Write;
+        fs::create_dir_all(repo.path().join(".reducers")).unwrap();
+        let mut f = fs::File::create(repo.path().join(".reducers/reducer.js")).unwrap();
+        f.write(b"function() {\
+         if (this.counter == undefined) { \
+           this.counter = 1;   \
+         } else { \
+           this.counter++;
+         } \
+         return {\"hello\": this.counter}; \
+         }").unwrap();
+
+        let issue1 = repo.new_issue().unwrap();
+        issue1.new_record(vec![(".type/SummaryChanged", &b""[..]), ("text", &b"Title"[..])].into_iter(), true).unwrap();
+
+        let issue2 = repo.new_issue().unwrap();
+        issue2.new_record(vec![(".type/SummaryChanged", &b""[..]), ("text", &b"Title"[..])].into_iter(), true).unwrap();
+        issue2.new_record(vec![(".type/SummaryChanged", &b""[..]), ("text", &b"Title 1"[..])].into_iter(), true).unwrap();
+
+
+        let reducer = DuktapeReducer::new(&repo).unwrap();
+        let mut reducer1 = reducer.clone();
+        let mut reducer2 = reducer.clone();
+
+        let state1 = issue1.reduce_with_reducer(&mut reducer1).unwrap();
+        let state2 = issue2.reduce_with_reducer(&mut reducer2).unwrap();
+
+        use serde_json::Number;
+        assert_eq!(state1.get("hello").unwrap(), &JsonValue::Number(Number::from(1)));
+        assert_eq!(state2.get("hello").unwrap(), &JsonValue::Number(Number::from(2)));
+
+        // Now, make sure state gets copied from where it is, and not the original value:
+        let mut reducer3 = reducer2.clone();
+        let state3 = issue1.reduce_with_reducer(&mut reducer3).unwrap();
+        assert_eq!(state3.get("hello").unwrap(), &JsonValue::Number(Number::from(3)));
+    }
+
 }
diff --git a/sit-core/src/reducers/mod.rs b/sit-core/src/reducers/mod.rs
index 2169356..8987c86 100644
--- a/sit-core/src/reducers/mod.rs
+++ b/sit-core/src/reducers/mod.rs
@@ -9,7 +9,7 @@ pub trait Reducer: Sized {
     type Item;
 
     /// Takes current state, item and returns new state
-    fn reduce(&self, state: Self::State, item: &Self::Item) -> Self::State;
+    fn reduce(&mut self, state: Self::State, item: &Self::Item) -> Self::State;
     /// Chains two reducers together sequentially
     fn chain<R: Reducer<State=Self::State, Item=Self::Item>>(self, other: R) -> ChainedReducer<Self, R> {
        ChainedReducer::new(self, other)
@@ -37,7 +37,7 @@ impl<T, I, R1: Reducer<State=T, Item=I>, R2: Reducer<State=T, Item=I>> Reducer f
     type State = R1::State;
     type Item = R1::Item;
 
-    fn reduce(&self, state: Self::State, item: &Self::Item) -> Self::State {
+    fn reduce(&mut self, state: Self::State, item: &Self::Item) -> Self::State {
         self.1.reduce(self.0.reduce(state, item), item)
     }
 }
@@ -53,7 +53,7 @@ mod tests {
         type State = T;
         type Item = T;
 
-        fn reduce(&self, _state: Self::State, _item: &Self::Item) -> Self::State {
+        fn reduce(&mut self, _state: Self::State, _item: &Self::Item) -> Self::State {
             self.0.clone()
         }
     }
diff --git a/sit-web/Cargo.toml b/sit-web/Cargo.toml
index 3ab28c8..fe61022 100644
--- a/sit-web/Cargo.toml
+++ b/sit-web/Cargo.toml
@@ -13,11 +13,12 @@ config = { version = "0.8", features = ["json"] }
 serde = "1.0"
 serde_json = "1.0"
 xdg = "2.1"
-jmespath = "0.2"
+jmespath = { version = "0.2", features = ["sync"] }
 rouille =  "2.0"
 lazy_static = "1.0"
 mime_guess = "1.8"
 itertools = "0.7"
+rayon = "0.9"
 sit-core = { path = "../sit-core" }
 
 [build-dependencies]
diff --git a/sit-web/src/main.rs b/sit-web/src/main.rs
index 70a1c11..3efe8e4 100644
--- a/sit-web/src/main.rs
+++ b/sit-web/src/main.rs
@@ -24,6 +24,8 @@ extern crate jmespath;
 
 extern crate itertools;
 
+extern crate rayon;
+
 #[macro_use] extern crate lazy_static;
 #[macro_use] extern crate rouille;
 extern crate mime_guess;
diff --git a/sit-web/src/webapp.rs b/sit-web/src/webapp.rs
index 8506731..2048965 100644
--- a/sit-web/src/webapp.rs
+++ b/sit-web/src/webapp.rs
@@ -63,6 +63,8 @@ use mime_guess::get_mime_type_str;
 
 use std::ffi::OsString;
 
+use rayon::prelude::*;
+
 fn path_to_response<P: Into<PathBuf>>(path: P) -> Response {
     let path: PathBuf = path.into();
     match get_mime_type_str(path.extension().unwrap_or(&OsString::new()).to_str().unwrap()) {
@@ -94,35 +96,38 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
         (GET) (/api/issues/{filter_expr: String}/{query_expr: String}) => {
             use jmespath;
             use sit_core::issue::IssueReduction;
-            let filter = jmespath::compile(&filter_expr).expect("can't compile filter expression");
-            let query = jmespath::compile(&query_expr).expect("can't compile query expression");
             let issues = repo.issue_iter().expect("can't list issues");
-            let reducer = sit_core::reducers::duktape::DuktapeReducer::new(&repo).unwrap();
+            let mut reducer = sit_core::reducers::duktape::DuktapeReducer::new(&repo).unwrap();
+            let issues_with_reducers: Vec<_> =  issues.into_iter().map(|i| (i, reducer.clone())) .collect();
             let result: Vec<_> =
-            issues.map(|issue| {
-                     reducer.reset_state();
-                     issue.reduce_with_reducer(&reducer).unwrap()
+            issues_with_reducers.into_par_iter()
+                  .map(|(issue, mut reducer)| {
+                     issue.reduce_with_reducer(&mut reducer).unwrap()
                   })
                   .map(|reduced| {
-                     let json = sit_core::serde_json::to_string(&reduced).unwrap();
-                      jmespath::Variable::from_json(&json).unwrap()
-                  }).filter(|data| {
+                     sit_core::serde_json::to_string(&reduced).unwrap()
+                  }).map(|json| {
+                     let data = jmespath::Variable::from_json(&json).unwrap();
+                     let filter = jmespath::compile(&filter_expr).expect("can't compile filter expression");
                      let result = filter.search(&data).unwrap();
-                     result.as_boolean().unwrap()
+                     if result.as_boolean().unwrap() {
+                        let query = jmespath::compile(&query_expr).expect("can't compile query expression");
+                        Some(query.search(&data).unwrap())
+                     } else {
+                        None
+                     }
                   })
-                  .map(|data| {
-                    query.search(&data).unwrap()
-                  }).collect();
+                 .filter(Option::is_some).collect();
             Response::json(&result)
         },
         (GET) (/api/issue/{id: String}/{query_expr: String}) => {
             use jmespath;
             use sit_core::issue::IssueReduction;
             use sit_core::Issue;
-            let reducer = sit_core::reducers::duktape::DuktapeReducer::new(&repo).unwrap();
+            let mut reducer = sit_core::reducers::duktape::DuktapeReducer::new(&repo).unwrap();
             let query = jmespath::compile(&query_expr).expect("can't compile query expression");
             let issue = repo.issue_iter().unwrap().find(|i| i.id() == id).unwrap();
-            let reduced = issue.reduce_with_reducer(&reducer).unwrap();
+            let reduced = issue.reduce_with_reducer(&mut reducer).unwrap();
             let json = sit_core::serde_json::to_string(&reduced).unwrap();
             let data = jmespath::Variable::from_json(&json).unwrap();
             let result = query.search(&data).unwrap();
diff --git a/sit/Cargo.toml b/sit/Cargo.toml
index 9917484..5332a65 100644
--- a/sit/Cargo.toml
+++ b/sit/Cargo.toml
@@ -19,5 +19,6 @@ fs_extra = "1.1"
 pbr = "1.0"
 tempdir = "0.3"
 glob = "0.2"
+rayon = "0.9"
 sit-core = { path = "../sit-core" }
 
diff --git a/sit/src/main.rs b/sit/src/main.rs
index 5fb4edc..49bcf2c 100644
--- a/sit/src/main.rs
+++ b/sit/src/main.rs
@@ -36,6 +36,9 @@ extern crate pbr;
 extern crate tempdir;
 extern crate glob;
 
+extern crate rayon;
+use rayon::prelude::*;
+
 use std::collections::HashMap;
 fn get_named_expression<S: AsRef<str>>(name: S, repo: &sit_core::Repository,
                                        repo_path: S, exprs: &HashMap<String, String>) -> Option<String> {
@@ -313,7 +316,7 @@ fn main() {
         }
 
         if let Some(matches) = matches.subcommand_matches("issues") {
-            let issues = repo.issue_iter().expect("can't list issues");
+            let issues: Vec<_> = repo.issue_iter().expect("can't list issues").collect();
 
             let filter_expr = matches.value_of("named-filter")
                 .and_then(|name|
@@ -326,25 +329,31 @@ fn main() {
                 .or_else(|| matches.value_of("query").or_else(|| Some("id")).map(String::from))
                 .unwrap();
 
-            let filter = jmespath::compile(&filter_expr).expect("can't compile filter expression");
-            let query = jmespath::compile(&query_expr).expect("can't compile query expression");
-
-            let reducer = sit_core::reducers::duktape::DuktapeReducer::new(&repo).unwrap();
-            for issue in issues {
-                let result = issue.reduce_with_reducer(&reducer).expect("can't reduce issue");
-                let json = sit_core::serde_json::to_string(&result).unwrap();
-                let data = jmespath::Variable::from_json(&json).unwrap();
-                let result = filter.search(&data).unwrap();
-                if result.as_boolean().unwrap() {
-                    let view = query.search(&data).unwrap();
-                    if view.is_string() {
-                        println!("{}", view.as_string().unwrap());
+            let mut reducer = sit_core::reducers::duktape::DuktapeReducer::new(&repo).unwrap();
+            let issues_with_reducers: Vec<_> =  issues.into_iter().map(|i| (i, reducer.clone())) .collect();
+            issues_with_reducers.into_par_iter()
+                .map(|(issue, mut reducer)| {
+                    let filter = jmespath::compile(&filter_expr).expect("can't compile filter expression");
+                    let query = jmespath::compile(&query_expr).expect("can't compile query expression");
+                    let result = issue.reduce_with_reducer(&mut reducer).expect("can't reduce issue");
+                    let json = sit_core::serde_json::to_string(&result).unwrap();
+                    let data = jmespath::Variable::from_json(&json).unwrap();
+                    let result = filter.search(&data).unwrap();
+                    if result.as_boolean().unwrap() {
+                        let view = query.search(&data).unwrap();
+                        if view.is_string() {
+                            Some(view.as_string().unwrap().clone())
+                        } else {
+                            Some(serde_json::to_string_pretty(&view).unwrap())
+                        }
                     } else {
-                        println!("{}", serde_json::to_string_pretty(&view).unwrap());
+                        None
                     }
-                }
-                reducer.reset_state();
-            }
+                })
+                .filter(Option::is_some).map(Option::unwrap)
+                .for_each(|view| {
+                    println!("{}", view);
+                });
         }
 
         if let Some(matches) = matches.subcommand_matches("record") {
@@ -588,8 +597,8 @@ fn main() {
 
                     let query = jmespath::compile(&query_expr).expect("can't compile query expression");
 
-                    let reducer = sit_core::reducers::duktape::DuktapeReducer::new(&repo).unwrap();
-                    let result = issue.reduce_with_reducer(&reducer).expect("can't reduce issue");
+                    let mut reducer = sit_core::reducers::duktape::DuktapeReducer::new(&repo).unwrap();
+                    let result = issue.reduce_with_reducer(&mut reducer).expect("can't reduce issue");
                     let json = sit_core::serde_json::to_string(&result).unwrap();
                     let data = jmespath::Variable::from_json(&json).unwrap();
                     let view = query.search(&data).unwrap();
-- 
2.15.0

