From dc1a23d925959bbe9d7df61f0b015e09375ac280 Mon Sep 17 00:00:00 2001
From: Yurii Rashkovskii <me@yrashk.com>
Date: Wed, 18 Apr 2018 09:07:35 -0700
Subject: [PATCH] Problem: `sit init` CLI command is not tested

This can lead to problems with broken behaviour.

Solution: cover it with basic integration tests

While working on it, I've noticed that there's
no interaction between working directory and a
repository (if both are supplied). This means
that if both are, repository's path will be used
relative to the current directory of the process,
effectively ignoring supplied working directory.

To address this, if both are supplied, they will
be concatenated. This means that if, for example,
repository path is relative, it'll be relative
to the supplied working directory. If it is absolute,
it'll be effectively used as is.
---
 Cargo.lock                |  7 ++++
 sit/Cargo.toml            |  3 ++
 sit/src/command_cli.rs    | 25 +++++++++++++
 sit/src/main.rs           | 20 ++---------
 sit/tests/command_init.rs | 91 +++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 128 insertions(+), 18 deletions(-)
 create mode 100644 sit/src/command_cli.rs
 create mode 100644 sit/tests/command_init.rs

diff --git a/Cargo.lock b/Cargo.lock
index fe93990..b6a7168 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -206,6 +206,11 @@ dependencies = [
  "yaml-rust 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "cli_test_dir"
+version = "0.1.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "config"
 version = "0.8.0"
@@ -1009,6 +1014,7 @@ version = "0.4.0"
 dependencies = [
  "chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "cli_test_dir 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)",
  "config 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "dunce 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1440,6 +1446,7 @@ dependencies = [
 "checksum chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "7c20ebe0b2b08b0aeddba49c609fe7957ba2e33449882cb186a180bc60682fa9"
 "checksum chunked_transfer 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)" = "498d20a7aaf62625b9bf26e637cf7736417cde1d0c99f1d04d1170229a85cf87"
 "checksum clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)" = "f0f16b89cbb9ee36d87483dc939fe9f1e13c05898d56d7b230a0d4dff033a536"
+"checksum cli_test_dir 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)" = "d8fb20cba2f4b12fe7df665e23bf22551a45c61586026b4a0993bf5cd8a71c40"
 "checksum config 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)" = "e595d1735d8ab6b04906bbdcfc671cce2a5e609b6f8e92865e67331cc2f41ba4"
 "checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e"
 "checksum crc 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "bd5d02c0aac6bd68393ed69e00bbc2457f3e89075c6349db7189618dc4ddc1d7"
diff --git a/sit/Cargo.toml b/sit/Cargo.toml
index 9825da8..623e515 100644
--- a/sit/Cargo.toml
+++ b/sit/Cargo.toml
@@ -26,6 +26,9 @@ dunce = "0.1"
 which = "2.0"
 sit-core = { path = "../sit-core", version = "0.4.0" }
 
+[dev-dependencies]
+cli_test_dir = "0.1"
+
 [features]
 windows7 = ["sit-core/windows7"]
 
diff --git a/sit/src/command_cli.rs b/sit/src/command_cli.rs
new file mode 100644
index 0000000..eb98014
--- /dev/null
+++ b/sit/src/command_cli.rs
@@ -0,0 +1,25 @@
+use std::path::Path;
+use clap::ArgMatches;
+use sit_core;
+
+pub fn command<P1: AsRef<Path>, P2: AsRef<Path>>(init_matches: &ArgMatches, matches: &ArgMatches, working_dir: P1, default_repo: P2) -> i32 {
+    let path = matches.value_of("repository").map(|r| working_dir.as_ref().join(r)).unwrap_or(default_repo.as_ref().into());
+    let path_str = path.to_str().unwrap();
+    match sit_core::Repository::new(&path) {
+        Ok(repo) => {
+            if !init_matches.is_present("dont-populate") {
+                repo.populate_default_files().expect("can't populate default files");
+            }
+            eprintln!("Repository {} initialized", path_str);
+            return 0;
+        }
+        Err(sit_core::RepositoryError::AlreadyExists) => {
+            eprintln!("Repository {} already exists", path_str);
+            return 0;
+        },
+        Err(err) => {
+            eprintln!("Error while initializing repository {}: {}", path_str, err);
+            return 1;
+        }
+    }
+}
\ No newline at end of file
diff --git a/sit/src/main.rs b/sit/src/main.rs
index 8dbe211..175f8f3 100644
--- a/sit/src/main.rs
+++ b/sit/src/main.rs
@@ -26,6 +26,7 @@ mod rebuild;
 use rebuild::rebuild_repository;
 mod command_config;
 mod command_args;
+mod command_cli;
 
 #[cfg(unix)]
 extern crate xdg;
@@ -359,24 +360,7 @@ fn main_with_result(allow_external_subcommands: bool) -> i32 {
     }
 
     if let Some(init_matches) = matches.subcommand_matches("init") {
-        let dot_sit_str = matches.value_of("repository").unwrap_or(dot_sit.to_str().unwrap());
-        match sit_core::Repository::new(&dot_sit_str) {
-            Ok(repo) => {
-                if !init_matches.is_present("dont-populate") {
-                    repo.populate_default_files().expect("can't populate default files");
-                }
-                eprintln!("Repository {} initialized", dot_sit_str);
-                return 0;
-            }
-            Err(sit_core::RepositoryError::AlreadyExists) => {
-                eprintln!("Repository {} already exists", dot_sit_str);
-                return 0;
-            },
-            Err(err) => {
-                eprintln!("Error while initializing repository {}: {}", dot_sit_str, err);
-                return 1;
-            }
-        }
+        return command_cli::command(&init_matches, &matches, &working_dir, &dot_sit);
     } else if let Some(matches) = matches.subcommand_matches("rebuild") {
         rebuild_repository(matches.value_of("SRC").unwrap(),
                            matches.value_of("DEST").unwrap(),
diff --git a/sit/tests/command_init.rs b/sit/tests/command_init.rs
new file mode 100644
index 0000000..cc87108
--- /dev/null
+++ b/sit/tests/command_init.rs
@@ -0,0 +1,91 @@
+extern crate cli_test_dir;
+extern crate sit_core;
+
+use cli_test_dir::*;
+use sit_core::Repository;
+use std::fs;
+
+/// Should initialize a repository
+#[test]
+fn repo_init() {
+    let dir = TestDir::new("sit", "repo_init");
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+    assert!(dir.path(".sit").is_dir());
+    assert!(Repository::open(dir.path(".sit")).is_ok());
+}
+
+/// Should return failing status when unable to initialize a repository
+#[test]
+fn repo_init_fail() {
+    let dir = TestDir::new("sit", "repo_init_fail");
+    dir.cmd()
+        .arg("-r")
+        .arg("/this/path/does/not/exist")
+        .arg("init")
+        .expect_failure();
+}
+
+/// Should keep existing repository as is
+#[test]
+fn repo_reinit() {
+    let dir = TestDir::new("sit", "repo_reinit");
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+    assert!(dir.path(".sit").is_dir());
+    let repo = Repository::open(dir.path(".sit")).unwrap();
+    assert_eq!(repo.item_iter().unwrap().count(), 0);
+    repo.new_item().unwrap();
+    assert_eq!(repo.item_iter().unwrap().count(), 1);
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+    let repo = Repository::open(dir.path(".sit")).unwrap();
+    // still has that one item
+    assert_eq!(repo.item_iter().unwrap().count(), 1);
+}
+
+/// Should respect working directory
+#[test]
+fn repo_init_workdir() {
+    let dir = TestDir::new("sit", "repo_init_workdir");
+    fs::create_dir_all(dir.path("workdir")).unwrap();
+    dir.cmd()
+        .arg("-d")
+        .arg(dir.path("workdir"))
+        .arg("init")
+        .expect_success();
+    assert!(dir.path("workdir").join(".sit").is_dir());
+    assert!(Repository::open(dir.path("workdir").join(".sit")).is_ok());
+}
+
+/// Should respect repository path
+#[test]
+fn repo_init_repo_path() {
+    let dir = TestDir::new("sit", "repo_init_repo_path");
+    dir.cmd()
+        .arg("-r")
+        .arg(dir.path("repo"))
+        .arg("init")
+        .expect_success();
+    assert!(dir.path("repo").is_dir());
+    assert!(Repository::open(dir.path("repo")).is_ok());
+}
+
+/// Should concatenate working directory and a repository if both are supplied
+#[test]
+fn repo_init_path_concat() {
+    let dir = TestDir::new("sit", "repo_init_path_concat");
+    fs::create_dir_all(dir.path("workdir")).unwrap();
+    dir.cmd()
+        .arg("-d")
+        .arg(dir.path("workdir"))
+        .arg("-r")
+        .arg("repo")
+        .arg("init")
+        .expect_success();
+    assert!(dir.path("workdir").join("repo").is_dir());
+    assert!(Repository::open(dir.path("workdir").join("repo")).is_ok());
+}
-- 
2.16.2

