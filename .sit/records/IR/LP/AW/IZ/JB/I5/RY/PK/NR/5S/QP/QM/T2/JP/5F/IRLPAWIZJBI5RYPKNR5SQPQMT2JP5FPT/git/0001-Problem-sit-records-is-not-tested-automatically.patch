From 0c50a08c992845c2a7b044651433d51baf9c67f6 Mon Sep 17 00:00:00 2001
From: Yurii Rashkovskii <me@yrashk.com>
Date: Fri, 11 May 2018 13:06:22 -0700
Subject: [PATCH] Problem: `sit records` is not tested automatically

Solution: provide initial test coverage
---
 sit/src/command_records.rs   | 108 ++++++++++++++
 sit/src/main.rs              | 103 +------------
 sit/tests/command_records.rs | 333 +++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 443 insertions(+), 101 deletions(-)
 create mode 100644 sit/src/command_records.rs
 create mode 100644 sit/tests/command_records.rs

diff --git a/sit/src/command_records.rs b/sit/src/command_records.rs
new file mode 100644
index 0000000..468d9d1
--- /dev/null
+++ b/sit/src/command_records.rs
@@ -0,0 +1,108 @@
+use clap::ArgMatches;
+use sit_core::{Repository, Record, Item, cfg::Configuration};
+use serde_json;
+use super::get_named_expression;
+use jmespath;
+use std::fs;
+use super::gnupg;
+
+pub fn command(matches: &ArgMatches, repo: &Repository, config: Configuration) -> i32 {
+    let id = matches.value_of("id").unwrap();
+    match repo.item(id) {
+        None => {
+            eprintln!("Item {} not found", id);
+            return 1;
+        },
+        Some(item) => {
+            let records = item.record_iter().expect("can't lis records");
+
+            let filter_expr = matches.value_of("named-filter")
+                .and_then(|name|
+                    get_named_expression(name, &repo, ".records/filters", &config.records.filters))
+                .or_else(|| matches.value_of("filter").or_else(|| Some("type(@) == 'object'")).map(String::from))
+                .unwrap();
+
+            let filter_defined = matches.is_present("named-filter") || matches.is_present("filter");
+
+            let query_expr = matches.value_of("named-query")
+                .and_then(|name|
+                    get_named_expression(name, &repo, ".records/queries", &config.records.queries))
+                .or_else(|| matches.value_of("query").or_else(|| Some("hash")).map(String::from))
+                .unwrap();
+
+            let filter = jmespath::compile(&filter_expr).expect("can't compile filter expression");
+            let query = jmespath::compile(&query_expr).expect("can't compile query expression");
+
+            for record in records {
+                for rec in record {
+                    // convert to JSON
+                    let json = serde_json::to_string(&rec).unwrap();
+                    // ...and back so that we can treat the record as a plain JSON
+                    let mut json: serde_json::Value = serde_json::from_str(&json).unwrap();
+                    if let serde_json::Value::Object(ref mut map) = json {
+                        let verify = matches.is_present("verify") && rec.path().join(".signature").is_file();
+
+                        if verify {
+                            use std::io::Write;
+                            let program = gnupg(matches, &config).expect("can't find GnuPG");
+                            let mut command = ::std::process::Command::new(program);
+
+                            command
+                                .stdin(::std::process::Stdio::piped())
+                                .stdout(::std::process::Stdio::piped())
+                                .stderr(::std::process::Stdio::piped())
+                                .arg("--verify")
+                                .arg(rec.path().join(".signature"))
+                                .arg("-");
+
+                            let mut child = command.spawn().expect("failed spawning gnupg");
+
+                            {
+                                use sit_core::repository::DynamicallyHashable;
+                                fn not_signature(val: &(String, fs::File)) -> bool {
+                                    &val.0 != ".signature"
+                                }
+                                let filtered_record = rec.filtered(not_signature);
+                                let filtered_dynamic = filtered_record.dynamically_hashed();
+                                let mut stdin = child.stdin.as_mut().expect("Failed to open stdin");
+                                stdin.write_all(filtered_dynamic.encoded_hash().as_bytes()).expect("Failed to write to stdin");
+                            }
+
+                            let output = child.wait_with_output().expect("failed to read stdout");
+
+                            if !output.status.success() {
+                                let mut status = serde_json::Map::new();
+                                status.insert("success".into(), serde_json::Value::Bool(false));
+                                status.insert("output".into(), serde_json::Value::String(String::from_utf8_lossy(&output.stderr).into()));
+                                map.insert("verification".into(), serde_json::Value::Object(status));
+                            } else {
+                                let mut status = serde_json::Map::new();
+                                status.insert("success".into(), serde_json::Value::Bool(true));
+                                status.insert("output".into(), serde_json::Value::String(String::from_utf8_lossy(&output.stderr).into()));
+                                map.insert("verification".into(), serde_json::Value::Object(status));
+                            }
+
+                        }
+
+                    }
+
+                    let data = jmespath::Variable::from(json);
+                    let result = if filter_defined {
+                        filter.search(&data).unwrap().as_boolean().unwrap()
+                    } else {
+                        true
+                    };
+                    if result {
+                        let view = query.search(&data).unwrap();
+                        if view.is_string() {
+                            println!("{}", view.as_string().unwrap());
+                        } else {
+                            println!("{}", serde_json::to_string_pretty(&view).unwrap());
+                        }
+                    }
+                }
+            }
+        }
+    }
+    return 0;
+}
diff --git a/sit/src/main.rs b/sit/src/main.rs
index 7d63d1a..799577a 100644
--- a/sit/src/main.rs
+++ b/sit/src/main.rs
@@ -6,13 +6,10 @@ extern crate tempfile;
 
 use std::env;
 use std::path::PathBuf;
-use std::fs;
 use std::process::exit;
 
 use clap::{Arg, App, SubCommand, ArgMatches};
 
-use sit_core::{Item, Record};
-
 extern crate serde;
 extern crate serde_json;
 extern crate yaml_rust;
@@ -29,6 +26,7 @@ mod command_item;
 mod command_record;
 mod command_items;
 mod command_reduce;
+mod command_records;
 
 #[cfg(unix)]
 extern crate xdg;
@@ -398,104 +396,7 @@ fn main_with_result(allow_external_subcommands: bool) -> i32 {
         }
 
         if let Some(matches) = matches.subcommand_matches("records") {
-            let id = matches.value_of("id").unwrap();
-            match repo.item(id) {
-                None => {
-                    eprintln!("Item {} not found", id);
-                    return 1;
-                },
-                Some(item) => {
-                    let records = item.record_iter().expect("can't lis records");
-
-                    let filter_expr = matches.value_of("named-filter")
-                        .and_then(|name|
-                            get_named_expression(name, &repo, ".records/filters", &config.records.filters))
-                        .or_else(|| matches.value_of("filter").or_else(|| Some("type(@) == 'object'")).map(String::from))
-                        .unwrap();
-
-                    let filter_defined = matches.is_present("named-filter") || matches.is_present("filter");
-
-                    let query_expr = matches.value_of("named-query")
-                        .and_then(|name|
-                            get_named_expression(name, &repo, ".records/queries", &config.records.queries))
-                        .or_else(|| matches.value_of("query").or_else(|| Some("hash")).map(String::from))
-                        .unwrap();
-
-                    let filter = jmespath::compile(&filter_expr).expect("can't compile filter expression");
-                    let query = jmespath::compile(&query_expr).expect("can't compile query expression");
-
-                    for record in records {
-                       for rec in record {
-                           // convert to JSON
-                           let json = serde_json::to_string(&rec).unwrap();
-                           // ...and back so that we can treat the record as a plain JSON
-                           let mut json: serde_json::Value = serde_json::from_str(&json).unwrap();
-                           if let serde_json::Value::Object(ref mut map) = json {
-                               let verify = matches.is_present("verify") && rec.path().join(".signature").is_file();
-
-                               if verify {
-                                   use std::io::Write;
-                                   let program = gnupg(matches, &config).expect("can't find GnuPG");
-                                   let mut command = ::std::process::Command::new(program);
-
-                                   command
-                                       .stdin(::std::process::Stdio::piped())
-                                       .stdout(::std::process::Stdio::piped())
-                                       .stderr(::std::process::Stdio::piped())
-                                       .arg("--verify")
-                                       .arg(rec.path().join(".signature"))
-                                       .arg("-");
-
-                                   let mut child = command.spawn().expect("failed spawning gnupg");
-
-                                   {
-                                       use sit_core::repository::DynamicallyHashable;
-                                       fn not_signature(val: &(String, fs::File)) -> bool {
-                                           &val.0 != ".signature"
-                                       }
-                                       let filtered_record = rec.filtered(not_signature);
-                                       let filtered_dynamic = filtered_record.dynamically_hashed();
-                                       let mut stdin = child.stdin.as_mut().expect("Failed to open stdin");
-                                       stdin.write_all(filtered_dynamic.encoded_hash().as_bytes()).expect("Failed to write to stdin");
-                                   }
-
-                                   let output = child.wait_with_output().expect("failed to read stdout");
-
-                                   if !output.status.success() {
-                                       let mut status = serde_json::Map::new();
-                                       status.insert("success".into(), serde_json::Value::Bool(false));
-                                       status.insert("output".into(), serde_json::Value::String(String::from_utf8_lossy(&output.stderr).into()));
-                                       map.insert("verification".into(), serde_json::Value::Object(status));
-                                   } else {
-                                       let mut status = serde_json::Map::new();
-                                       status.insert("success".into(), serde_json::Value::Bool(true));
-                                       status.insert("output".into(), serde_json::Value::String(String::from_utf8_lossy(&output.stderr).into()));
-                                       map.insert("verification".into(), serde_json::Value::Object(status));
-                                   }
-
-                               }
-
-                           }
-
-                           let data = jmespath::Variable::from(json);
-                           let result = if filter_defined {
-                               filter.search(&data).unwrap().as_boolean().unwrap()
-                           } else {
-                               true
-                           };
-                           if result {
-                               let view = query.search(&data).unwrap();
-                               if view.is_string() {
-                                   println!("{}", view.as_string().unwrap());
-                               } else {
-                                   println!("{}", serde_json::to_string_pretty(&view).unwrap());
-                               }
-                           }
-                       }
-                    }
-                }
-            }
-            return 0;
+            return command_records::command(matches, &repo, config);
         }
 
         if let Some(matches) = matches.subcommand_matches("reduce") {
diff --git a/sit/tests/command_records.rs b/sit/tests/command_records.rs
new file mode 100644
index 0000000..2d5225c
--- /dev/null
+++ b/sit/tests/command_records.rs
@@ -0,0 +1,333 @@
+extern crate cli_test_dir;
+extern crate sit_core;
+extern crate which;
+
+use std::process;
+
+use sit_core::{Repository, Item};
+
+use cli_test_dir::*;
+
+/// Should list no records if there are none
+#[test]
+fn no_records() {
+    let dir = TestDir::new("sit", "no_records");
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+    let id = String::from_utf8(dir.cmd().arg("item").expect_success().stdout).unwrap();
+    let output = String::from_utf8(dir.cmd().args(&["records", id.trim()]).expect_success().stdout).unwrap();
+    assert_eq!(output, "");
+}
+
+
+/// Should list a record if there's one
+#[test]
+fn record() {
+    let dir = TestDir::new("sit", "rec_record");
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+    let id = String::from_utf8(dir.cmd().arg("item").expect_success().stdout).unwrap();
+    let record = String::from_utf8(dir.cmd().args(&["record", id.trim(), "-t", "Type"]).expect_success().stdout).unwrap();
+    let output = String::from_utf8(dir.cmd().args(&["records", id.trim()]).expect_success().stdout).unwrap();
+    assert_eq!(output, record);
+}
+
+
+/// Should apply filter
+#[test]
+fn filter() {
+    let dir = TestDir::new("sit", "rec_filter");
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+    let id = String::from_utf8(dir.cmd().arg("item").expect_success().stdout).unwrap();
+    let record = String::from_utf8(dir.cmd().args(&["record", id.trim(), "-t", "Type"]).expect_success().stdout).unwrap();
+    let record1 = String::from_utf8(dir.cmd().args(&["record", id.trim(), "-t", "Type"]).expect_success().stdout).unwrap();
+    // filter out item we just created
+    let output = String::from_utf8(dir.cmd().args(&["records", id.trim(), "-f", &format!("hash != '{}'", record.trim())]).expect_success().stdout).unwrap();
+    assert_eq!(output, record1);
+}
+
+/// Should apply filter
+#[test]
+fn named_filter() {
+    let dir = TestDir::new("sit", "rec_named_filter");
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+    let id = String::from_utf8(dir.cmd().arg("item").expect_success().stdout).unwrap();
+    let record = String::from_utf8(dir.cmd().args(&["record", id.trim(), "-t", "Type"]).expect_success().stdout).unwrap();
+    let record1 = String::from_utf8(dir.cmd().args(&["record", id.trim(), "-t", "Type"]).expect_success().stdout).unwrap();
+    // filter out item we just created
+    dir.create_file(".sit/.records/filters/f1", &format!("hash != '{}'", record.trim()));
+    let output = String::from_utf8(dir.cmd().args(&["records", id.trim(), "-F", "f1"]).expect_success().stdout).unwrap();
+    assert_eq!(output, record1);
+}
+
+
+/// Should apply named user filter
+#[test]
+fn named_user_filter() {
+        let dir = TestDir::new("sit", "rec_named_filter");
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+    let id = String::from_utf8(dir.cmd().arg("item").expect_success().stdout).unwrap();
+    let record = String::from_utf8(dir.cmd().args(&["record", id.trim(), "-t", "Type"]).expect_success().stdout).unwrap();
+    let record1 = String::from_utf8(dir.cmd().args(&["record", id.trim(), "-t", "Type"]).expect_success().stdout).unwrap();
+    // filter out item we just created
+    let cfg = &format!(r#"{{"records": {{"filters": {{"f1": "hash != '{}'"}}}}}}"#, record.trim());
+    #[cfg(unix)]
+    dir.create_file(".config/sit/config.json", cfg);
+    #[cfg(windows)]
+    dir.create_file("sit_config.json", cfg);
+    let output = String::from_utf8(dir.cmd().env("HOME", dir.path(".").to_str().unwrap()).args(&["records", id.trim(), "-F", "f1"]).expect_success().stdout).unwrap();
+    assert_eq!(output, record1);
+}
+
+/// Should prefer repo named filter over user named filer
+#[test]
+fn repo_over_named_user_filter() {
+    let dir = TestDir::new("sit", "rec_named_repo_over_user_filter");
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+       let id = String::from_utf8(dir.cmd().arg("item").expect_success().stdout).unwrap();
+    let record = String::from_utf8(dir.cmd().args(&["record", id.trim(), "-t", "Type"]).expect_success().stdout).unwrap();
+    let record1 = String::from_utf8(dir.cmd().args(&["record", id.trim(), "-t", "Type"]).expect_success().stdout).unwrap();
+    // filter out item we just created
+    let cfg = &format!(r#"{{"records": {{"filters": {{"f1": "hash != '{}'"}}}}}}"#, record1.trim());
+    #[cfg(unix)]
+    dir.create_file(".config/sit/config.json", cfg);
+    #[cfg(windows)]
+    dir.create_file("sit_config.json", cfg);
+    dir.create_file(".sit/.records/filters/f1", &format!("hash != '{}'", record1.trim()));
+    let output = String::from_utf8(dir.cmd().env("HOME", dir.path(".").to_str().unwrap()).args(&["records", id.trim(), "-F", "f1"]).expect_success().stdout).unwrap();
+    assert_eq!(output, record);
+}
+
+/// Should apply query
+#[test]
+fn query() {
+    let dir = TestDir::new("sit", "rec_query");
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+    let id = String::from_utf8(dir.cmd().arg("item").expect_success().stdout).unwrap();
+    let repo = Repository::open(dir.path(".sit")).unwrap();
+    let item = repo.item(id.trim()).unwrap();
+    // create a record
+    let _record = item.new_record(vec![("test", &b"passed"[..])].into_iter(), true).unwrap();
+    let output = String::from_utf8(dir.cmd().args(&["records",id.trim(),"-q", "files.test"]).expect_success().stdout).unwrap();
+    assert_eq!(output.trim(), "passed");
+}
+
+
+/// Should apply named query
+#[test]
+fn named_query() {
+    let dir = TestDir::new("sit", "rec_named_query");
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+    let id = String::from_utf8(dir.cmd().arg("item").expect_success().stdout).unwrap();
+    let repo = Repository::open(dir.path(".sit")).unwrap();
+    let item = repo.item(id.trim()).unwrap();
+    // create a record
+    let _record = item.new_record(vec![("test", &b"passed"[..])].into_iter(), true).unwrap();
+    dir.create_file(".sit/.records/queries/q1", "files.test");
+    let output = String::from_utf8(dir.cmd().args(&["records",id.trim(),"-Q", "q1"]).expect_success().stdout).unwrap();
+    assert_eq!(output.trim(), "passed");
+}
+
+
+/// Should apply named user query
+#[test]
+fn named_user_query() {
+    let dir = TestDir::new("sit", "rec_named_user_query");
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+    let id = String::from_utf8(dir.cmd().arg("item").expect_success().stdout).unwrap();
+    let repo = Repository::open(dir.path(".sit")).unwrap();
+    let item = repo.item(id.trim()).unwrap();
+    // create a record
+    let _record = item.new_record(vec![("test", &b"passed"[..])].into_iter(), true).unwrap();
+    let cfg = r#"{"records": {"queries": {"q1": "files.test"}}}"#;
+    #[cfg(unix)]
+    dir.create_file(".config/sit/config.json", cfg);
+    #[cfg(windows)]
+    dir.create_file("sit_config.json", cfg);
+    let output = String::from_utf8(dir.cmd().env("HOME", dir.path(".").to_str().unwrap()).args(&["records", id.trim(), "-Q", "q1"]).expect_success().stdout).unwrap();
+    assert_eq!(output.trim(), "passed");
+}
+
+
+/// Should prefer repo named query over user user named query
+#[test]
+fn repo_over_named_user_query() {
+    let dir = TestDir::new("sit", "rec_repo_over_named_user_query");
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+        let id = String::from_utf8(dir.cmd().arg("item").expect_success().stdout).unwrap();
+    let repo = Repository::open(dir.path(".sit")).unwrap();
+    let item = repo.item(id.trim()).unwrap();
+    // create a record
+    let _record = item.new_record(vec![("test", &b"passed"[..])].into_iter(), true).unwrap();
+    dir.create_file(".sit/.records/queries/q1", "files.test");
+    let cfg = r#"{"records": {"queries": {"q1": "null"}}}"#;
+    #[cfg(unix)]
+    dir.create_file(".config/sit/config.json", cfg);
+    #[cfg(windows)]
+    dir.create_file("sit_config.json", cfg);
+    let output = String::from_utf8(dir.cmd().env("HOME", dir.path(".").to_str().unwrap()).args(&["records", id.trim(), "-Q", "q1"]).expect_success().stdout).unwrap();
+    assert_eq!(output.trim(), "passed");
+}
+
+/// Should verify PGP signature if instructed
+#[test]
+fn pgp_signature() {
+    let dir = TestDir::new("sit", "pgp");
+
+    let gpg = which::which("gpg2").or_else(|_| which::which("gpg")).expect("should have gpg installed");
+
+    let mut genkey = process::Command::new(&gpg)
+        .args(&["--batch", "--gen-key","-"])
+        .env("GNUPGHOME", dir.path(".").to_str().unwrap())
+        .stdin(::std::process::Stdio::piped())
+        .stdout(::std::process::Stdio::null())
+        .stderr(::std::process::Stdio::null())
+        .spawn().unwrap();
+
+    {
+        use std::io::Write;
+        let stdin = genkey.stdin.as_mut().expect("Failed to open stdin");
+        stdin.write_all(r#"
+        Key-Type: default
+        Subkey-Type: default
+        Name-Real: Test
+        Name-Comment: Test
+        Name-Email: test@test.com
+        Expire-Date: 0
+        %no-protection
+        %commit
+        "#.as_bytes()).expect("Failed to write to stdin");
+    }
+    genkey.expect_success();
+
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+    let id: String = String::from_utf8(dir.cmd()
+        .arg("item")
+        .expect_success().stdout).unwrap().trim().into();
+
+    dir.cmd()
+        .env("HOME", dir.path(".").to_str().unwrap()) // to ensure there are right configs
+        .env("GNUPGHOME", dir.path(".").to_str().unwrap())
+        .args(&["record", "--sign",  "--signing-key", "test@test.com", &id, "--no-author", "-t","Sometype"])
+        .expect_success();
+
+    let output = String::from_utf8(dir.cmd()
+        .env("HOME", dir.path(".").to_str().unwrap())
+        .env("GNUPGHOME", dir.path(".").to_str().unwrap())
+        .args(&["records", id.trim(), "-v", "-q", "verification.success"]).expect_success().stdout).unwrap();
+    assert_eq!(output.trim(), "true");
+}
+
+/// Should indicate if PGP signature is for something else
+#[test]
+fn pgp_signature_wrong_data() {
+    let dir = TestDir::new("sit", "pgps");
+
+    let gpg = which::which("gpg2").or_else(|_| which::which("gpg")).expect("should have gpg installed");
+
+    let mut genkey = process::Command::new(&gpg)
+        .args(&["--batch", "--gen-key","-"])
+        .env("GNUPGHOME", dir.path(".").to_str().unwrap())
+        .stdin(::std::process::Stdio::piped())
+        .stdout(::std::process::Stdio::null())
+        .stderr(::std::process::Stdio::null())
+        .spawn().unwrap();
+
+    {
+        use std::io::Write;
+        let stdin = genkey.stdin.as_mut().expect("Failed to open stdin");
+        stdin.write_all(r#"
+        Key-Type: default
+        Subkey-Type: default
+        Name-Real: Test
+        Name-Comment: Test
+        Name-Email: test@test.com
+        Expire-Date: 0
+        %no-protection
+        %commit
+        "#.as_bytes()).expect("Failed to write to stdin");
+    }
+    genkey.expect_success();
+
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+    let id: String = String::from_utf8(dir.cmd()
+        .arg("item")
+        .expect_success().stdout).unwrap().trim().into();
+
+    // Snatch the signature
+    let oldrec = String::from_utf8(dir.cmd()
+        .env("HOME", dir.path(".").to_str().unwrap()) // to ensure there are right configs
+        .env("GNUPGHOME", dir.path(".").to_str().unwrap())
+        .args(&["record", "--sign",  "--signing-key", "test@test.com", &id, "--no-author", "-t","Sometype"])
+        .expect_success().stdout).unwrap();
+
+    use std::fs::{File, remove_dir_all};
+    use std::io::{Read, Write};
+    let mut f = File::open(dir.path(".sit").join("items").join(id.trim()).join(oldrec.trim()).join(".signature")).unwrap();
+    let mut s = String::new();
+    f.read_to_string(&mut s).unwrap();
+    remove_dir_all(dir.path(".sit").join("items").join(id.trim()).join(oldrec.trim())).unwrap();
+
+    let mut f = File::create(dir.path(".signature")).unwrap();
+    f.write(s.as_bytes()).unwrap();
+    //
+
+    dir.cmd()
+        .env("HOME", dir.path(".").to_str().unwrap()) // to ensure there are right configs
+        .env("GNUPGHOME", dir.path(".").to_str().unwrap())
+        .args(&["record", &id, "--no-author", "-t","Sometype1", ".signature"])
+        .expect_success();
+
+
+    let output = String::from_utf8(dir.cmd()
+        .env("HOME", dir.path(".").to_str().unwrap())
+        .env("GNUPGHOME", dir.path(".").to_str().unwrap())
+        .args(&["records", id.trim(), "-v", "-q", "verification.success"]).expect_success().stdout).unwrap();
+    assert_eq!(output.trim(), "false");
+}
+
+
+/// Should not verify PGP key if there is no signature
+#[test]
+fn pgp_no_signature() {
+    let dir = TestDir::new("sit", "pgpno");
+
+    dir.cmd()
+        .arg("init")
+        .expect_success();
+    let id: String = String::from_utf8(dir.cmd()
+        .arg("item")
+        .expect_success().stdout).unwrap().trim().into();
+
+    dir.cmd()
+        .env("HOME", dir.path(".").to_str().unwrap()) // to ensure there are right configs
+        .args(&["record", &id, "--no-author", "-t","Sometype"])
+        .expect_success();
+
+    let output = String::from_utf8(dir.cmd()
+        .env("HOME", dir.path(".").to_str().unwrap())
+        .args(&["records", id.trim(), "-v", "-q", "verification"]).expect_success().stdout).unwrap();
+    assert_eq!(output.trim(), "null");
+}
-- 
2.16.2

