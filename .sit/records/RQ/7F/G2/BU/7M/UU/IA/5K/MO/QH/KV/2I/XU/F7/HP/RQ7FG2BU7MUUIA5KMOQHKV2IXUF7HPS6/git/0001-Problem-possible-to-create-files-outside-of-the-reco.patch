From 66890f597e4e260ee0ff01d6d0aee58cd5cf8abe Mon Sep 17 00:00:00 2001
From: Yurii Rashkovskii <me@yrashk.com>
Date: Thu, 24 May 2018 14:11:59 -0700
Subject: [PATCH] Problem: possible to create files outside of the record

If one was to pass a filename like "../filename" or "/tmp/something",
sit-core would try to oblige.

What's even worse, it hashes these relative paths as names
so even if these relative paths resolve back into the record,
the hash upon checking will not match.

This is a pretty big deal. While I believe `sit` binary kind of
prevents this scenario by having its own checks, this exposes
sit-core as a library to this vulnerability.

Solution: make `OrderedFiles` normalize filenames
and `new_record_in` in Repository reject files that are not
contained inside of the record.
---
 Cargo.lock                 |  7 +++++++
 sit-core/Cargo.toml        |  1 +
 sit-core/src/lib.rs        |  2 ++
 sit-core/src/record.rs     | 36 ++++++++++++++++++++++------------
 sit-core/src/repository.rs | 49 ++++++++++++++++++++++++++++++++++++----------
 sit/src/command_record.rs  |  6 +++---
 6 files changed, 75 insertions(+), 26 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index caac6e3..477b13b 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -959,6 +959,11 @@ name = "regex-syntax"
 version = "0.4.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "relative-path"
+version = "0.3.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "remove_dir_all"
 version = "0.5.1"
@@ -1138,6 +1143,7 @@ dependencies = [
  "lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "memmap 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "proptest 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "relative-path 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)",
  "serde 1.0.43 (registry+https://github.com/rust-lang/crates.io-index)",
  "serde_derive 1.0.43 (registry+https://github.com/rust-lang/crates.io-index)",
  "serde_json 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1629,6 +1635,7 @@ dependencies = [
 "checksum regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)" = "4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f"
 "checksum regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)" = "f9ec002c35e86791825ed294b50008eea9ddfc8def4420124fbc6b08db834957"
 "checksum regex-syntax 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)" = "8e931c58b93d86f080c734bfd2bce7dd0079ae2331235818133c8be7f422e20e"
+"checksum relative-path 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)" = "e614f96449605730b4f7ad2c019e88c1652d730634b4eba07b810801856635e3"
 "checksum remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)" = "3488ba1b9a2084d38645c4c08276a1752dcbf2c7130d74f1569681ad5d2799c5"
 "checksum rouille 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)" = "cc1f8407af80b0630983b2c1f1860dda1960fdec8d3ee75ba8db14937756d3a0"
 "checksum rustc-demangle 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)" = "11fb43a206a04116ffd7cfcf9bcb941f8eb6cc7ff667272246b0a1c74259a3cb"
diff --git a/sit-core/Cargo.toml b/sit-core/Cargo.toml
index eb7afdb..f64f016 100644
--- a/sit-core/Cargo.toml
+++ b/sit-core/Cargo.toml
@@ -24,6 +24,7 @@ uuid = { version = "0.5", features = ["v4"], optional = true }
 memmap = { version = "0.6", optional = true}
 cesu8 = { version = "1.1", optional = true }
 git2 = { version = "0.7", optional = true, default-features = false }
+relative-path = "0.3"
 
 [dev-dependencies]
 dunce = "0.1"
diff --git a/sit-core/src/lib.rs b/sit-core/src/lib.rs
index a29ce37..6d0e51a 100644
--- a/sit-core/src/lib.rs
+++ b/sit-core/src/lib.rs
@@ -35,6 +35,8 @@ extern crate digest;
 
 #[cfg(test)] extern crate dunce;
 
+extern crate relative_path;
+
 // Crates necessary for testing
 #[cfg(test)] #[macro_use] extern crate assert_matches;
 #[cfg(test)] #[macro_use] extern crate proptest;
diff --git a/sit-core/src/record.rs b/sit-core/src/record.rs
index 6d0e12a..8424e5d 100644
--- a/sit-core/src/record.rs
+++ b/sit-core/src/record.rs
@@ -89,17 +89,14 @@ impl<'a, F: File> OrderedFiles<'a, F> {
     /// to avoid re-reading them to accomplish both of the operations. By itself, however,
     /// this function doesn't do anything in term of saving files (or any other functionality),
     /// that is responsibility of `per_file` and `per_chunk` callbacks.
-    pub fn hash_and<PF, F_, PC>(mut self, hasher: &mut Hasher, per_file: PF, per_chunk: PC) -> Result<(), io::Error>
-        where PF: Fn(&str) -> Result<F_, io::Error>, PC: Fn(F_, &[u8]) -> Result<F_, io::Error> {
+    pub fn hash_and<PF, F_, PC, E>(mut self, hasher: &mut Hasher, per_file: PF, per_chunk: PC) -> Result<(), E>
+        where PF: Fn(&str) -> Result<F_, E>, PC: Fn(F_, &[u8]) -> Result<F_, E>, E: From<io::Error> {
         let mut buf = vec![0; 4096];
         for file in self.0.iter_mut() {
-            #[cfg(windows)] // replace backslashes with slashes
-            let name_for_hashing: String = file.name().replace("\\", "/").into();
-            #[cfg(unix)]
-            let name_for_hashing: String = file.name().into();
-            hasher.process(name_for_hashing.as_bytes());
+            let name: String = file.name().into();
+            hasher.process(name.as_bytes());
             let mut reader = file.read();
-            let mut file_processor = per_file(&name_for_hashing)?;
+            let mut file_processor = per_file(&name)?;
             loop {
                 let bytes_read = reader.read(&mut buf)?;
                 hasher.process(&buf);
@@ -117,9 +114,16 @@ impl<'a, F: File> OrderedFiles<'a, F> {
     }
 }
 
-impl<'a, I, F> From<I> for OrderedFiles<'a, F> where I: IntoIterator<Item=F>, F: File + 'a {
+impl<'a, I, F> From<I> for OrderedFiles<'a, (String, F::Read)> where I: IntoIterator<Item=F>, F: File + 'a {
     fn from(i: I) -> Self {
-        let mut files: Vec<_> = i.into_iter().collect();
+        let mut files: Vec<_> = i.into_iter().map(|file| {
+            // replace backslashes with slashes (Windows)
+            let name_for_hashing: String = file.name().replace("\\", "/").into();
+            use relative_path::RelativePath;
+            let name_for_hashing: String = RelativePath::new(&name_for_hashing).normalize().as_str().into();
+            (name_for_hashing, file.into_read())
+        }).collect();
+
         files.sort_unstable_by(|f1, f2| f1.name().cmp(f2.name()));
         OrderedFiles(files, PhantomData)
     }
@@ -158,7 +162,7 @@ impl<'a, F, S> Sub<S> for OrderedFiles<'a, F> where F: File + 'a, S: AsRef<str>
     fn sub(self, rhs: S) -> Self::Output {
         let name = rhs.as_ref();
         let files: Vec<_> = self.0.into_iter().filter(|f| f.name() != name).collect();
-        files.into()
+        OrderedFiles(files, PhantomData)
     }
 }
 
@@ -226,9 +230,15 @@ mod ordered_files_tests {
       }
 
     }
-}
-
 
+    #[test]
+    fn ordered_files_normalizes() {
+        let files1: OrderedFiles<_> = vec![("test/../hello", &b""[..]), ("/test0", &b""[..]), ("a\\b", &b""[..]), ("./test1", &b""[..])].into();
+        let files2: OrderedFiles<_> = vec![("hello", &b""[..]), ("test0", &b""[..]), ("a/b", &b""[..]), ("test1", &b""[..])].into();
+        assert_eq!(files1.0.iter().map(|f| f.name()).collect::<Vec<_>>(),
+                   files2.0.iter().map(|f| f.name()).collect::<Vec<_>>());
+    }
+}
 
 /// Record is an immutable collection of files
 pub trait Record {
diff --git a/sit-core/src/repository.rs b/sit-core/src/repository.rs
index e875f83..185279d 100644
--- a/sit-core/src/repository.rs
+++ b/sit-core/src/repository.rs
@@ -104,6 +104,10 @@ pub enum Error {
     AlreadyExists,
     /// Item not found
     NotFound,
+    /// Path prefix error
+    ///
+    /// Currently, this is used when one attempts to create a record file outside of the record
+    PathPrefixError,
     /// Upgrade required
     #[error(no_from, non_std)]
     UpgradeRequired(Upgrade),
@@ -393,6 +397,7 @@ pub struct Item<'a> {
 }
 
 use record::{File, OrderedFiles};
+use relative_path::{RelativePath, Component as RelativeComponent};
 
 impl<'a> Item<'a> {
     pub fn new_record_in<'f, P: AsRef<Path>, F: File + 'f, I: Into<OrderedFiles<'f, F>>>(&self, path: P, files: I, link_parents: bool) ->
@@ -411,14 +416,21 @@ impl<'a> Item<'a> {
             files.boxed()
         };
 
-        files.hash_and(&mut *hasher, |n| {
-            let path = tempdir.path().join(PathBuf::from(n));
-            let mut dir = path.clone();
+        files.hash_and(&mut *hasher, |n| -> Result<fs::File, Error> {
+            let path = RelativePath::new(n).normalize();
+            if path.components().any(|c| match c {
+                RelativeComponent::Normal(_) => false,
+                _ => true,
+            }) {
+                return Err(Error::PathPrefixError);
+            }
+            let actual_path = path.to_path(tempdir.path());
+            let mut dir = actual_path.clone();
             dir.pop();
             fs::create_dir_all(dir)?;
-            let file = fs::File::create(path)?;
+            let file = fs::File::create(actual_path)?;
             Ok(file)
-        }, |mut f, c| f.write(c).map(|_| f))?;
+        }, |mut f, c| -> Result<fs::File, Error> { f.write(c).map(|_| f).map_err(|e| e.into()) })?;
 
 
         let hash = hasher.result_box();
@@ -795,6 +807,25 @@ mod tests {
         assert_eq!(records.pop().unwrap().hash(), record.hash());
     }
 
+    #[test]
+    fn record_files_path() {
+        let mut tmp = TempDir::new("sit").unwrap().into_path();
+        tmp.push(".sit");
+        let repo = Repository::new(&tmp).unwrap();
+        // create an item
+        let item = repo.new_item().unwrap();
+        // attempt to create a record with an invalid filename
+        assert_matches!(item.new_record(vec![(".", &b"hello"[..])].into_iter(), false), Err(Error::IoError(_)));
+        assert_matches!(item.new_record(vec![("../test", &b"hello"[..])].into_iter(), false), Err(Error::PathPrefixError));
+        assert_matches!(item.new_record(vec![("something/../../test", &b"hello"[..])].into_iter(), false), Err(Error::PathPrefixError));
+        // however, these are alright
+        assert_matches!(item.new_record(vec![("something/../test", &b"hello"[..])].into_iter(), false), Ok(_));
+        assert_matches!(item.new_record(vec![("./test1", &b"hello"[..])].into_iter(), false), Ok(_));
+        // root is normalized, too
+        let record = item.new_record(vec![("/test2", &b"hello"[..])].into_iter(), false).unwrap();
+        assert_eq!(record.file_iter().next().unwrap().name(), "test2");
+    }
+
 
     #[test]
     fn new_record_parents_linking() {
@@ -952,11 +983,9 @@ mod tests {
         let item2 = repo.new_item().unwrap();
         let record2 = item2.new_record(vec![("test", &[1u8][..]), ("z/a", &[2u8][..])].into_iter(), false).unwrap();
         assert_eq!(record1.hash(), record2.hash());
-        #[cfg(windows)] {
-            let item3 = repo.new_item().unwrap();
-            let record3 = item3.new_record(vec![("test", &[1u8][..]), ("z\\a", &[2u8][..])].into_iter(), false).unwrap();
-            assert_eq!(record3.hash(), record2.hash());
-        }
+        let item3 = repo.new_item().unwrap();
+        let record3 = item3.new_record(vec![("test", &[1u8][..]), ("z\\a", &[2u8][..])].into_iter(), false).unwrap();
+        assert_eq!(record3.hash(), record2.hash());
     }
 
     #[test]
diff --git a/sit/src/command_record.rs b/sit/src/command_record.rs
index 0a2cfdb..bc79774 100644
--- a/sit/src/command_record.rs
+++ b/sit/src/command_record.rs
@@ -91,14 +91,14 @@ pub fn command<P: AsRef<Path>, P1: AsRef<Path>>(matches: &ArgMatches, repo: &Rep
                 // .authors
                 let authorship_files: Option<OrderedFiles<(String, _)>> = if !matches.is_present("no-author") {
                     let authors = format!("{}", config.author.clone().unwrap());
-                    Some(vec![(".authors".into(), Cursor::new(authors))].into())
+                    Some(vec![(String::from(".authors"), Cursor::new(authors))].into())
                 } else {
                     None
                 };
 
                 let timestamp: Option<OrderedFiles<(String, _)>>= if !matches.is_present("no-timestamp") {
                     let timestamp = format!("{:?}", utc);
-                    Some(vec![(".timestamp".into(), Cursor::new(timestamp))].into())
+                    Some(vec![(String::from(".timestamp"), Cursor::new(timestamp))].into())
                 } else {
                     None
                 };
@@ -154,7 +154,7 @@ pub fn command<P: AsRef<Path>, P1: AsRef<Path>>(matches: &ArgMatches, repo: &Rep
                     return 1;
                 } else {
                     let files = record_files(matches, utc, &config).expect("failed collecting files");
-                    let signature_file: OrderedFiles<(String, _)> = vec![(".signature".into(), Cursor::new(output.stdout))].into();
+                    let signature_file: OrderedFiles<(String, _)> = vec![(String::from(".signature"), Cursor::new(output.stdout))].into();
                     files + signature_file
                 }
 
-- 
2.16.2

