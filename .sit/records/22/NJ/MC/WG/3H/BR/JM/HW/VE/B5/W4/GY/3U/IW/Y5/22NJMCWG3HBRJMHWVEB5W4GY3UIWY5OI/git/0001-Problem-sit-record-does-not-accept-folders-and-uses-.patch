From f949dcc42652f3f6a020e46a01cefacaecf3a4e0 Mon Sep 17 00:00:00 2001
From: Stuart Hinson <stuart.hinson@gmail.com>
Date: Tue, 24 Jul 2018 21:43:19 -0700
Subject: [PATCH] Problem: sit record does not accept folders , and uses exit

Solution: use the Dirwalk crate the iterate over any folders that are
given, and translate the exit calls into Results so that Drop is
called as expected
---
 Cargo.lock                |  20 ++++++
 sit/Cargo.toml            |   1 +
 sit/src/command_record.rs | 180 +++++++++++++++++++++++++++++++---------------
 sit/src/main.rs           |   8 ++-
 4 files changed, 147 insertions(+), 62 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index aee6fb3..6867a46 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1020,6 +1020,14 @@ name = "safemem"
 version = "0.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "same-file"
+version = "1.0.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "scopeguard"
 version = "0.3.3"
@@ -1131,6 +1139,7 @@ dependencies = [
  "tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)",
  "tempfile 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "thread_local 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)",
+ "walkdir 2.1.4 (registry+https://github.com/rust-lang/crates.io-index)",
  "which 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "xdg 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "yaml-rust 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1490,6 +1499,15 @@ name = "void"
 version = "1.0.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "walkdir"
+version = "2.1.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "same-file 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "which"
 version = "2.0.0"
@@ -1677,6 +1695,7 @@ dependencies = [
 "checksum rustc-demangle 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)" = "11fb43a206a04116ffd7cfcf9bcb941f8eb6cc7ff667272246b0a1c74259a3cb"
 "checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)" = "dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda"
 "checksum safemem 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)" = "e27a8b19b835f7aea908818e871f5cc3a5a186550c30773be987e155e8163d8f"
+"checksum same-file 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)" = "cfb6eded0b06a0b512c8ddbcf04089138c9b4362c2f696f3c3d76039d68f3637"
 "checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27"
 "checksum serde 0.8.23 (registry+https://github.com/rust-lang/crates.io-index)" = "9dad3f759919b92c3068c696c15c3d17238234498bbdcc80f2c469606f948ac8"
 "checksum serde 1.0.43 (registry+https://github.com/rust-lang/crates.io-index)" = "0c855d888276f20d140223bd06515e5bf1647fd6d02593cb5792466d9a8ec2d0"
@@ -1726,6 +1745,7 @@ dependencies = [
 "checksum vec_map 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)" = "887b5b631c2ad01628bbbaa7dd4c869f80d3186688f8d0b6f58774fbe324988c"
 "checksum version_check 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "6b772017e347561807c1aa192438c5fd74242a670a6cffacc40f2defd1dc069d"
 "checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)" = "6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d"
+"checksum walkdir 2.1.4 (registry+https://github.com/rust-lang/crates.io-index)" = "63636bd0eb3d00ccb8b9036381b526efac53caf112b7783b730ab3f8e44da369"
 "checksum which 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)" = "49c4f580e93079b70ac522e7bdebbe1568c8afa7d8d05ee534ee737ca37d2f51"
 "checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)" = "167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a"
 "checksum winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)" = "04e3bd221fcbe8a271359c04f21a76db7d0c6028862d1bb5512d85e1e2eb5bb3"
diff --git a/sit/Cargo.toml b/sit/Cargo.toml
index 30763dd..9f5b1dd 100644
--- a/sit/Cargo.toml
+++ b/sit/Cargo.toml
@@ -23,6 +23,7 @@ rayon = "1.0"
 question = "0.2"
 dunce = "0.1"
 which = "2.0"
+walkdir = "2.1"
 atty = "0.2"
 thread_local = "0.3"
 derive-error = "0.0"
diff --git a/sit/src/command_record.rs b/sit/src/command_record.rs
index bc79774..c5ca9eb 100644
--- a/sit/src/command_record.rs
+++ b/sit/src/command_record.rs
@@ -1,16 +1,126 @@
+use atty;
+use chrono::prelude::*;
 use clap::{self, ArgMatches};
-use sit_core::{Repository, Record, Item, record::{OrderedFiles, BoxedOrderedFiles}};
+use dunce;
+use serde_json;
 use sit_core::cfg::{self, Configuration};
-use chrono::prelude::*;
-use std::process::exit;
-use std::io::{self, Cursor, Write};
+use sit_core::{
+    record::{BoxedOrderedFiles, OrderedFiles},
+    Item, Record, Repository,
+};
+use std::env;
+use std::ffi::OsString;
 use std::fs;
+use std::io::{self, Cursor, ErrorKind, Write};
 use std::path::{Path, PathBuf};
-use std::env;
-use atty;
-use serde_json;
+use walkdir::{self as walk, WalkDir};
+
+fn record_files(
+    matches: &ArgMatches,
+    utc: DateTime<Utc>,
+    config: &Configuration,
+) -> Result<BoxedOrderedFiles<'static>, io::Error> {
+    let files = matches
+        .values_of("FILES")
+        .unwrap_or(clap::Values::default());
+
+    let files: OrderedFiles<_> = files
+        .into_iter()
+        .map(|name| {
+            let path = PathBuf::from(&name);
+            if path.is_file() {
+                Ok(vec![(OsString::from(name), path)])
+            } else if path.is_dir() {
+                let entries = WalkDir::new(path)
+                    .into_iter()
+                    .filter_map(|f| {
+                        if let Ok(f) = f {
+                            if f.metadata().expect("error reading metadata").is_file() {
+                                Some(f)
+                            } else {
+                                None
+                            }
+                        } else {
+                            None
+                        }
+                    })
+                    .map(|entry: walk::DirEntry| {
+                        (entry.file_name().to_owned(), entry.path().to_owned())
+                    })
+                    .collect();
+
+                Ok(entries)
+            } else {
+                Err(io::Error::new(
+                    ErrorKind::InvalidInput,
+                    format!(
+                        "{} does not exist or is not a regular file",
+                        path.to_str().unwrap()
+                    ),
+                ))
+            }
+        })
+        .collect::<Result<Vec<_>, _>>()?
+        .iter()
+        .flat_map(|files| {
+            files.iter().map(|(name, path)| {
+                let abs_name = dunce::canonicalize(path).expect("can't canonicalize path");
+                let cur_dir = dunce::canonicalize(
+                    env::current_dir().expect("can't get current directory"),
+                ).expect("can't canonicalize current directory");
+                match abs_name.strip_prefix(&cur_dir) {
+                    Err(_) => Err(io::Error::new(
+                        ErrorKind::InvalidInput,
+                        format!(
+                            "Path {:?} is not relative to {} current directory",
+                            name,
+                            cur_dir.to_str().unwrap()
+                        ),
+                    )),
+                    Ok(path) => Ok(String::from(path.to_str().unwrap())),
+                }
+            })
+        })
+        .collect::<Result<Vec<_>, _>>()?
+        .iter()
+        .map(|name| (name.clone(), fs::File::open(name).expect("can't open file")))
+        .into();
+
+    let types: Vec<_> = match matches.value_of("type") {
+        Some(types) => types.split(",").collect(),
+        None => vec![],
+    };
+
+    let type_files: OrderedFiles<_> = types
+        .iter()
+        .map(|t| (format!(".type/{}", *t), &[][..]))
+        .into();
+
+    // .authors
+    let authorship_files: Option<OrderedFiles<(String, _)>> = if !matches.is_present("no-author") {
+        let authors = format!("{}", config.author.clone().unwrap());
+        Some(vec![(String::from(".authors"), Cursor::new(authors))].into())
+    } else {
+        None
+    };
+
+    let timestamp: Option<OrderedFiles<(String, _)>> = if !matches.is_present("no-timestamp") {
+        let timestamp = format!("{:?}", utc);
+        Some(vec![(String::from(".timestamp"), Cursor::new(timestamp))].into())
+    } else {
+        None
+    };
+
+    Ok(files + type_files + authorship_files + timestamp)
+}
 
-pub fn command<P: AsRef<Path>, P1: AsRef<Path>>(matches: &ArgMatches, repo: &Repository, mut config: Configuration, working_directory: P, config_path: P1) -> i32 {
+pub fn command<P: AsRef<Path>, P1: AsRef<Path>>(
+    matches: &ArgMatches,
+    repo: &Repository,
+    mut config: Configuration,
+    working_directory: P,
+    config_path: P1,
+) -> i32 {
     if !matches.is_present("no-author") && config.author.is_none() {
         if let Some(author) = cfg::Author::from_gitconfig(working_directory.as_ref().join(".git").join("config")) {
             config.author = Some(author);
@@ -43,7 +153,8 @@ pub fn command<P: AsRef<Path>, P1: AsRef<Path>>(matches: &ArgMatches, repo: &Rep
                     Some(answer) => panic!("Invalid answer {:?}", answer),
                 };
                 config.author = Some(cfg::Author { name, email });
-                let file = fs::File::create(config_path).expect("can't open config file for writing");
+                let file =
+                    fs::File::create(config_path).expect("can't open config file for writing");
                 serde_json::to_writer_pretty(file, &config).expect("can't write config");
             } else {
                 eprintln!("SIT needs your authorship identity to be configured (supported sources: sit, git), or re-run this command in a terminal\n");
@@ -57,59 +168,10 @@ pub fn command<P: AsRef<Path>, P1: AsRef<Path>>(matches: &ArgMatches, repo: &Rep
         None => {
             eprintln!("Item {} not found", id);
             return 1;
-        },
+        }
         Some(item) => {
-            fn record_files(matches: &ArgMatches, utc: DateTime<Utc>, config: &Configuration) -> Result<BoxedOrderedFiles<'static>, io::Error> {
-                let files = matches.values_of("FILES").unwrap_or(clap::Values::default());
-                let files: OrderedFiles<_> = files.into_iter()
-                    .map(move |name| {
-                        let path = PathBuf::from(&name);
-                        if !path.is_file() {
-                            eprintln!("{} does not exist or is not a regular file", path.to_str().unwrap());
-                            exit(1);
-                        }
-                        let abs_name = ::dunce::canonicalize(path).expect("can't canonicalize path");
-                        let cur_dir = ::dunce::canonicalize(env::current_dir().expect("can't get current directory")).expect("can't canonicalize current directory");
-                        match abs_name.strip_prefix(&cur_dir) {
-                            Err(_) => {
-                                eprintln!("Path {} is not relative to {} current directory", name, cur_dir.to_str().unwrap());
-                                exit(1);
-                            },
-                            Ok(path) => String::from(path.to_str().unwrap()),
-                        }
-                    })
-                    .map(|name| (name.clone(), ::std::fs::File::open(name).expect("can't open file"))).into();
-
-                let types: Vec<_> = match matches.value_of("type") {
-                    Some(types) => types.split(",").collect(),
-                    None => vec![],
-                };
-
-                let type_files: OrderedFiles<_> = types.iter().map(|t|
-                    (format!(".type/{}", *t),&[][..])).into();
-
-                // .authors
-                let authorship_files: Option<OrderedFiles<(String, _)>> = if !matches.is_present("no-author") {
-                    let authors = format!("{}", config.author.clone().unwrap());
-                    Some(vec![(String::from(".authors"), Cursor::new(authors))].into())
-                } else {
-                    None
-                };
-
-                let timestamp: Option<OrderedFiles<(String, _)>>= if !matches.is_present("no-timestamp") {
-                    let timestamp = format!("{:?}", utc);
-                    Some(vec![(String::from(".timestamp"), Cursor::new(timestamp))].into())
-                } else {
-                    None
-                };
-
-                Ok(files + type_files + authorship_files + timestamp)
-
-            }
-
             let utc: DateTime<Utc> = Utc::now();
 
-
             let signing = matches.is_present("sign") || config.signing.enabled;
 
             let files = record_files(matches, utc, &config).expect("failed collecting files");
diff --git a/sit/src/main.rs b/sit/src/main.rs
index f484d9a..a1bbdf5 100644
--- a/sit/src/main.rs
+++ b/sit/src/main.rs
@@ -2,16 +2,18 @@ extern crate sit_core;
 
 extern crate chrono;
 extern crate tempfile;
-#[macro_use] extern crate clap;
+#[macro_use]
+extern crate clap;
 
 use std::env;
 use std::path::PathBuf;
 use std::process::exit;
 
-use clap::{Arg, App, SubCommand, ArgMatches};
+use clap::{App, Arg, ArgMatches, SubCommand};
 
 extern crate serde;
 extern crate serde_json;
+extern crate walkdir;
 extern crate yaml_rust;
 
 extern crate config;
@@ -222,7 +224,7 @@ fn main_with_result(allow_external_subcommands: bool) -> i32 {
             .arg(Arg::with_name("FILES")
                      .multiple(true)
                      .takes_value(true)
-                     .help("Collection of files the record will be built from")))
+                     .help("Collection of files or folders the record will be built from")))
         .subcommand(SubCommand::with_name("records")
             .settings(&[clap::AppSettings::ColoredHelp, clap::AppSettings::ColorAuto])
             .about("Lists records")
-- 
2.15.2 (Apple Git-101.1)

