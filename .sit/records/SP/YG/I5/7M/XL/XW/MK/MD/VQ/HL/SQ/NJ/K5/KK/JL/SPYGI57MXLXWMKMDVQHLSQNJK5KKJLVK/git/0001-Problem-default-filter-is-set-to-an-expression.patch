From 2a8bfc17795d0506446df9b8f885489c194d039b Mon Sep 17 00:00:00 2001
From: Yurii Rashkovskii <me@yrashk.com>
Date: Mon, 19 Feb 2018 15:50:57 +0700
Subject: [PATCH] Problem: default filter is set to an expression

Default filter means "no filtering".

This means it'll be checked every time against
the issue or the record, even though the intent
was to use no filters.

Solution: don't apply filter unless its actually specified
---
 sit-web/src/webapp.rs                              | 20 ++++++++++++----
 .../webapp/src/dashboard-page/dashboard-page.html  |  2 +-
 sit/src/main.rs                                    | 28 ++++++++++++++++------
 3 files changed, 37 insertions(+), 13 deletions(-)

diff --git a/sit-web/src/webapp.rs b/sit-web/src/webapp.rs
index 82f5ace..7a4f410 100644
--- a/sit-web/src/webapp.rs
+++ b/sit-web/src/webapp.rs
@@ -125,9 +125,14 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
             let mut reducer = sit_core::reducers::duktape::DuktapeReducer::new(&repo).unwrap();
             let issues_with_reducers: Vec<_> =  issues.into_iter().map(|i| (i, reducer.clone())).collect();
 
-            let filter = match jmespath::compile(&filter_expr) {
-                Ok(filter) => filter,
-                _ => return Response::empty_400(),
+            let filter_defined = filter_expr != "";
+            let filter = if filter_defined {
+                match jmespath::compile(&filter_expr) {
+                  Ok(filter) => filter,
+                  _ => return Response::empty_400(),
+                }
+            } else {
+                jmespath::compile("`true`").unwrap()
             };
             let query = match jmespath::compile(&query_expr) {
                 Ok(query) => query,
@@ -143,8 +148,13 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
                      sit_core::serde_json::to_string(&reduced).unwrap()
                   }).map(|json| {
                      let data = jmespath::Variable::from_json(&json).unwrap();
-                     let result = filter.search(&data).unwrap();
-                     if result.is_boolean() && result.as_boolean().unwrap() {
+                     let result = if filter_defined {
+                        let res = filter.search(&data).unwrap();
+                        res.is_boolean() && res.as_boolean().unwrap()
+                     } else {
+                        true
+                     };
+                     if result {
                         Some(query.search(&data).unwrap())
                      } else {
                         None
diff --git a/sit-web/webapp/src/dashboard-page/dashboard-page.html b/sit-web/webapp/src/dashboard-page/dashboard-page.html
index 67b3406..b847f52 100644
--- a/sit-web/webapp/src/dashboard-page/dashboard-page.html
+++ b/sit-web/webapp/src/dashboard-page/dashboard-page.html
@@ -65,7 +65,7 @@
                 return {
                     filter: {
                         type: String,
-                        value: "`true`"
+                        value: ""
                     },
                     filterQuery: {
                         type: String
diff --git a/sit/src/main.rs b/sit/src/main.rs
index b0c8990..42af77b 100644
--- a/sit/src/main.rs
+++ b/sit/src/main.rs
@@ -133,7 +133,7 @@ fn main_with_result() -> i32 {
                      .long("filter")
                      .short("f")
                      .takes_value(true)
-                     .help("Filter issues with a JMESPath query (defaults to `type(@) == 'object'`)"))
+                     .help("Filter issues with a JMESPath query"))
             .arg(Arg::with_name("query")
                      .conflicts_with("named-query")
                      .long("query")
@@ -201,7 +201,7 @@ fn main_with_result() -> i32 {
                      .long("filter")
                      .short("f")
                      .takes_value(true)
-                     .help("Filter records with a JMESPath query (defaults to `type(@) == 'object'`)"))
+                     .help("Filter records with a JMESPath query"))
             .arg(Arg::with_name("query")
                      .conflicts_with("named-query")
                      .long("query")
@@ -325,8 +325,11 @@ fn main_with_result() -> i32 {
             let filter_expr = matches.value_of("named-filter")
                 .and_then(|name|
                               get_named_expression(name, &repo, ".issues/filters", &config.issues.filters))
-                .or_else(|| matches.value_of("filter").or_else(|| Some("type(@) == 'object'")).map(String::from))
+                .or_else(|| matches.value_of("filter").or_else(|| Some("`true`")).map(String::from))
                 .unwrap();
+
+            let filter_defined = matches.is_present("named-filter") || matches.is_present("filter");
+
             let query_expr = matches.value_of("named-query")
                 .and_then(|name|
                               get_named_expression(name, &repo, ".issues/queries", &config.issues.queries))
@@ -343,8 +346,12 @@ fn main_with_result() -> i32 {
                     let result = issue.reduce_with_reducer(&mut reducer).expect("can't reduce issue");
                     let json = sit_core::serde_json::to_string(&result).unwrap();
                     let data = jmespath::Variable::from_json(&json).unwrap();
-                    let result = filter.search(&data).unwrap();
-                    if result.as_boolean().unwrap() {
+                    let result = if filter_defined {
+                        filter.search(&data).unwrap().as_boolean().unwrap()
+                    } else {
+                        true
+                    };
+                    if result {
                         let view = query.search(&data).unwrap();
                         if view.is_string() {
                             Some(view.as_string().unwrap().clone())
@@ -508,6 +515,9 @@ fn main_with_result() -> i32 {
                             get_named_expression(name, &repo, ".records/filters", &config.records.filters))
                         .or_else(|| matches.value_of("filter").or_else(|| Some("type(@) == 'object'")).map(String::from))
                         .unwrap();
+
+                    let filter_defined = matches.is_present("named-filter") || matches.is_present("filter");
+
                     let query_expr = matches.value_of("named-query")
                         .and_then(|name|
                             get_named_expression(name, &repo, ".records/queries", &config.records.queries))
@@ -575,8 +585,12 @@ fn main_with_result() -> i32 {
 
                            let json = sit_core::serde_json::to_string(&json).unwrap();
                            let data = jmespath::Variable::from_json(&json).unwrap();
-                           let result = filter.search(&data).unwrap();
-                           if result.as_boolean().unwrap() {
+                           let result = if filter_defined {
+                               filter.search(&data).unwrap().as_boolean().unwrap()
+                           } else {
+                               true
+                           };
+                           if result {
                                let view = query.search(&data).unwrap();
                                if view.is_string() {
                                    println!("{}", view.as_string().unwrap());
-- 
2.15.0

