From 9d02f3e98e80e261c33f2676155b30c62a0a2e81 Mon Sep 17 00:00:00 2001
From: Yurii Rashkovskii <me@yrashk.com>
Date: Mon, 12 Feb 2018 23:55:40 +0700
Subject: [PATCH] Problem: locking issues is a faulty mechanism

Basically what happens (and what I tried to fight
with locks) is that when we want to sign a record,
we first create a record without a signature, get
its hash, and sign it, putting file inside; then, we
rename the directory holding the record with the value
of the deterministic hash of the updated record.

Perhaps not the best way to do it, but it kind of worked
so far. Anyway, the issue is that concurrent processes
or threads can see this "record in the making" and use
it as a parent, only for it's hash to be changed in
a moment, rendering the new record unreachable.

Firstly, locking issues to write a record is not
going to work very well over networked file systems
or file synchronizers such as Dropbox. Because of
timing issues, "the other side" might see records
that will ultimately change their hash during signing
(yeah, that happens!) and depend on a wrong parent.

Secondly, the lock implementation we have sometimes
leaves lock files behind. Not sure why, but I had to
delete some mistakenly committed lock files.

Solution: never create "temporary" or "temporarily hashed"
records where they can be found by record iterators.

Allow creating them elsewhere and then [atomically] move
them when they're ready.

The claims of atomicity are a little bit tricky across
platforms. On Unix, `rename(3)` (used by Rust's `std::fs::rename`)
is required to be atomic by the specification.

On Windows, Rust uses `MoveFileEx` function with the
`MOVEFILE_REPLACE_EXISTING`, which does not provide such
guarantee, at least explicitly. The general sentiment online
that I can find so far can be summarized as "this is
as atomic as it gets on Windows", but I am no expert on
Windows, so if anyone can improve this, please do.
---
 Cargo.lock                 |  12 +---
 sit-core/Cargo.toml        |   1 -
 sit-core/src/issue.rs      |  15 +----
 sit-core/src/lib.rs        |   3 -
 sit-core/src/lock.rs       | 110 ----------------------------------
 sit-core/src/repository.rs | 144 +++++++++++++++++++++++++++++----------------
 sit-web/Cargo.toml         |   1 +
 sit-web/src/main.rs        |   2 +
 sit-web/src/webapp.rs      |  14 +++--
 sit/src/main.rs            |  12 ++--
 10 files changed, 116 insertions(+), 198 deletions(-)
 delete mode 100644 sit-core/src/lock.rs

diff --git a/Cargo.lock b/Cargo.lock
index 1c25e22..c06fc70 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -338,15 +338,6 @@ dependencies = [
  "miniz-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
-[[package]]
-name = "fs2"
-version = "0.4.3"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-dependencies = [
- "libc 0.2.36 (registry+https://github.com/rust-lang/crates.io-index)",
- "winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
-]
-
 [[package]]
 name = "fs_extra"
 version = "1.1.0"
@@ -916,7 +907,6 @@ dependencies = [
  "data-encoding 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "derive-error 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)",
  "digest 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)",
- "fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)",
  "glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)",
  "include_dir 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)",
  "lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -948,6 +938,7 @@ dependencies = [
  "serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)",
  "serde_json 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)",
  "sit-core 0.1.0",
+ "tempdir 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)",
  "tempfile 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "xdg 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
@@ -1289,7 +1280,6 @@ dependencies = [
 "checksum fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)" = "e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed"
 "checksum filetime 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)" = "714653f3e34871534de23771ac7b26e999651a0a228f47beb324dfdf1dd4b10f"
 "checksum flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)" = "e6234dd4468ae5d1e2dbb06fe2b058696fdc50a339c68a393aefbf00bc81e423"
-"checksum fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)" = "9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213"
 "checksum fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)" = "5f2a4a2034423744d2cc7ca2068453168dcdb82c438419e639a26bd87839c674"
 "checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82"
 "checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7"
diff --git a/sit-core/Cargo.toml b/sit-core/Cargo.toml
index 7fb160f..98d9a1c 100644
--- a/sit-core/Cargo.toml
+++ b/sit-core/Cargo.toml
@@ -18,7 +18,6 @@ data-encoding = "2.1"
 glob = "0.2"
 lazy_static = "1.0"
 tini = "0.2.0"
-fs2 = "0.4"
 blake2 = { version = "0.7", optional = true }
 sha-1 = { version = "0.7", optional = true }
 uuid = { version = "0.5", features = ["v4"], optional = true }
diff --git a/sit-core/src/issue.rs b/sit-core/src/issue.rs
index 2625ffa..396743b 100644
--- a/sit-core/src/issue.rs
+++ b/sit-core/src/issue.rs
@@ -2,7 +2,7 @@
 
 use serde_json::{Map, Value};
 
-use super::{Lock, Reducer};
+use super::Reducer;
 
 #[derive(Debug, Error)]
 pub enum ReductionError<Err: ::std::error::Error + ::std::fmt::Debug> {
@@ -25,10 +25,6 @@ pub trait Issue: Sized {
     type Records : IntoIterator<Item=Self::Record>;
     /// Iterator over lists of records
     type RecordIter : Iterator<Item=Self::Records>;
-    /// Lock type
-    type Lock : Lock;
-    /// Lock error
-    type LockError : ::std::error::Error + ::std::fmt::Debug;
     /// Issue must have an ID, ideally human-readable
     fn id(&self) -> &str;
     /// Iterates through the tree of records
@@ -40,15 +36,6 @@ pub trait Issue: Sized {
     fn new_record<S: AsRef<str>, R: ::std::io::Read,
                   I: Iterator<Item=(S, R)>>(&self, iter: I, link_parents: bool)
        -> Result<Self::Record, Self::Error>;
-    /// Creates and returns an exclusive lock.
-    ///
-    /// Blocks if there's already a lock in place.
-    ///
-    /// This is particularly useful for some elaborate
-    /// scenarios where records can be renamed at place (signing), and, therefore,
-    /// further addition of records can be erro-prone (picking up a parent
-    /// hash that is not going to be valid anymore)
-    fn lock_exclusively(&mut self) -> Result<Self::Lock, Self::LockError>;
 }
 
 /// [`Issue`] trait extension that defines and implements default reduction algorithms
diff --git a/sit-core/src/lib.rs b/sit-core/src/lib.rs
index 0b8a968..486aa8a 100644
--- a/sit-core/src/lib.rs
+++ b/sit-core/src/lib.rs
@@ -20,7 +20,6 @@ extern crate glob;
 extern crate data_encoding;
 #[macro_use] extern crate lazy_static;
 extern crate tini;
-extern crate fs2;
 
 // Hashing
 extern crate digest;
@@ -49,5 +48,3 @@ pub use reducers::Reducer;
 #[cfg(feature = "duktape")]
 pub mod duktape;
 pub mod cfg;
-pub mod lock;
-pub use lock::{FileLock, Lock};
diff --git a/sit-core/src/lock.rs b/sit-core/src/lock.rs
deleted file mode 100644
index c3683a7..0000000
--- a/sit-core/src/lock.rs
+++ /dev/null
@@ -1,110 +0,0 @@
-//! Provides `Lock` trait
-
-/// Primitive lock trait
-pub trait Lock {
-    /// Unlocks the lock
-    fn unlock(self);
-}
-
-use std::io;
-use std::fs::{self, File};
-use std::path::{Path, PathBuf};
-
-use fs2::FileExt;
-
-/// File-based lock
-pub struct FileLock(PathBuf, File);
-
-impl FileLock {
-    /// Returns a new lock
-    pub fn new<P: AsRef<Path>>(path: P) -> Result<Self, io::Error>  {
-        let file = File::create(path.as_ref())?;
-        file.lock_exclusive()?;
-        Ok(FileLock(path.as_ref().into(), file))
-    }
-}
-
-impl Drop for FileLock {
-    fn drop(&mut self) {
-        let _ = fs::remove_file(&self.0);
-    }
-}
-
-impl Lock for FileLock {
-    fn unlock(self) {
-        let _ = self.1.unlock();
-    }
-}
-
-#[cfg(test)]
-mod tests {
-
-    use super::*;
-    use tempdir::TempDir;
-
-    #[test]
-    fn lock_cleanup() {
-        let tmp = TempDir::new("sit").unwrap();
-        let path = tmp.path().join("test_lock");
-        let lock = FileLock::new(&path).unwrap();
-        assert!(path.is_file());
-        lock.unlock();
-        assert!(!path.is_file());
-    }
-
-
-    #[test]
-    fn lock_drop_cleanup() {
-        let tmp = TempDir::new("sit").unwrap();
-        let path = tmp.path().join("test_lock");
-        let lock = FileLock::new(&path).unwrap();
-        assert!(path.is_file());
-        drop(lock);
-        assert!(!path.is_file());
-    }
-
-    #[test]
-    fn lock_wait() {
-        use std::thread;
-        let tmp = TempDir::new("sit").unwrap();
-        let path = tmp.path().join("test_lock");
-        let lock = FileLock::new(&path).unwrap();
-        assert!(path.is_file());
-        let path_clone = path.clone();
-        let thread = thread::spawn(move || {
-            FileLock::new(path_clone).unwrap()
-        });
-        thread::sleep(::std::time::Duration::from_millis(200));
-        // unlock the first lock
-        thread::spawn(move || {
-            lock.unlock();
-        });
-        // this should be reachable
-        let lock2 = thread.join().unwrap();
-        lock2.unlock();
-        assert!(!path.is_file());
-    }
-
-    #[test]
-    fn lock_drop_wait() {
-        use std::thread;
-        let tmp = TempDir::new("sit").unwrap();
-        let path = tmp.path().join("test_lock");
-        let lock = FileLock::new(&path).unwrap();
-        assert!(path.is_file());
-        let path_clone = path.clone();
-        let thread = thread::spawn(move || {
-            FileLock::new(path_clone).unwrap()
-        });
-        thread::sleep(::std::time::Duration::from_millis(200));
-        // drop the first lock
-        thread::spawn(move || {
-            drop(lock)
-        });
-        // this should be reachable
-        let lock2 = thread.join().unwrap();
-        lock2.unlock();
-        assert!(!path.is_file());
-    }
-
-}
\ No newline at end of file
diff --git a/sit-core/src/repository.rs b/sit-core/src/repository.rs
index e5f573b..fc4b07d 100644
--- a/sit-core/src/repository.rs
+++ b/sit-core/src/repository.rs
@@ -20,6 +20,8 @@ use super::hash::{HashingAlgorithm, Hasher};
 use super::encoding::Encoding;
 use super::id::IdGenerator;
 
+use std::marker::PhantomData;
+
 /// Current repository format version
 const VERSION: &str = "1";
 /// Repository's config file name
@@ -279,40 +281,9 @@ fn process_file<S: AsRef<str>, R: ::std::io::Read>(hasher: &mut Hasher, name: S,
     }
     Ok(())
 }
-
-impl<'a> IssueTrait for Issue<'a> {
-
-    type Error = Error;
-    type Record = Record<'a>;
-    type Records = Vec<Record<'a>>;
-    type RecordIter = IssueRecordIter<'a>;
-
-    fn id(&self) -> &str {
-        self.id.to_str().unwrap()
-    }
-
-    fn record_iter(&self) -> Result<Self::RecordIter, Self::Error> {
-        let path = self.repository.issues_path.join(PathBuf::from(&self.id()));
-        let glob_pattern = format!("{}/**/*", path.to_str().unwrap());
-        let dir = fs::read_dir(&path)?.filter(|r| r.is_ok())
-            .map(|e| e.unwrap())
-            .collect();
-        let files: Vec<_> = glob::glob(&glob_pattern).expect("invalid glob pattern")
-            .filter(|r| r.is_ok())
-            .map(|r| r.unwrap())
-            .map(|f| f.strip_prefix(&path).unwrap().into())
-            .collect();
-        Ok(IssueRecordIter {
-            issue: self.id.clone(),
-            repository: self.repository,
-            dir,
-            files,
-            parents: vec![],
-        })
-    }
-
-    fn new_record<S: AsRef<str>, R: ::std::io::Read,
-        I: Iterator<Item=(S, R)>>(&self, iter: I, link_parents: bool) -> Result<Self::Record, Self::Error> {
+impl<'a> Issue<'a> {
+    pub fn new_record_in<P: AsRef<Path>, S: AsRef<str>, R: ::std::io::Read,
+        I: Iterator<Item=(S, R)>>(&self, path: P, iter: I, link_parents: bool) -> Result<<Issue<'a> as IssueTrait>::Record, <Issue<'a> as IssueTrait>::Error> {
         let tempdir = TempDir::new_in(&self.repository.path,"sit")?;
         let mut hasher = self.repository.config.hashing_algorithm.hasher();
         let mut buf = vec![0; 4096];
@@ -347,20 +318,53 @@ impl<'a> IssueTrait for Issue<'a> {
         }
 
         let hash = hasher.result_box();
-        fs::rename(tempdir.into_path(), self.repository.issues_path.join(PathBuf::from(self.id()))
-            .join(PathBuf::from(self.repository.config.encoding.encode(&hash))))?;
+        let actual_path = path.as_ref().join(PathBuf::from(self.repository.config.encoding.encode(&hash)));
+        fs::rename(tempdir.into_path(), &actual_path)?;
         Ok(Record {
             hash,
             issue: self.id.clone(),
             repository: self.repository,
+            actual_path,
+        })
+    }
+
+}
+impl<'a> IssueTrait for Issue<'a> {
+
+    type Error = Error;
+    type Record = Record<'a>;
+    type Records = Vec<Record<'a>>;
+    type RecordIter = IssueRecordIter<'a>;
+
+    fn id(&self) -> &str {
+        self.id.to_str().unwrap()
+    }
+
+    fn record_iter(&self) -> Result<Self::RecordIter, Self::Error> {
+        let path = self.repository.issues_path.join(PathBuf::from(&self.id()));
+        let glob_pattern = format!("{}/**/*", path.to_str().unwrap());
+        let dir = fs::read_dir(&path)?.filter(|r| r.is_ok())
+            .map(|e| e.unwrap())
+            .collect();
+        let files: Vec<_> = glob::glob(&glob_pattern).expect("invalid glob pattern")
+            .filter(|r| r.is_ok())
+            .map(|r| r.unwrap())
+            .map(|f| f.strip_prefix(&path).unwrap().into())
+            .collect();
+        Ok(IssueRecordIter {
+            issue: self.id.clone(),
+            repository: self.repository,
+            dir,
+            files,
+            parents: vec![],
         })
     }
-    type Lock = super::FileLock;
-    type LockError = ::std::io::Error;
 
-    fn lock_exclusively(&mut self) -> Result<Self::Lock, Self::LockError> {
-        super::FileLock::new(self.repository.issues_path().join(self.id()).join(".lock"))
+    fn new_record<S: AsRef<str>, R: ::std::io::Read,
+        I: Iterator<Item=(S, R)>>(&self, iter: I, link_parents: bool) -> Result<Self::Record, Self::Error> {
+       self.new_record_in(self.repository.issues_path.join(PathBuf::from(self.id())), iter, link_parents)
     }
+
 }
 
 /// An iterator over records in an issue
@@ -391,6 +395,7 @@ impl<'a> Iterator for IssueRecordIter<'a> {
                     hash: self.repository.config.encoding.decode(f.to_str().unwrap().as_bytes()).unwrap(),
                     issue: self.issue.clone(),
                     repository: self.repository,
+                    actual_path: self.repository.issues_path().join(&self.issue).join(f.to_str().unwrap()),
                 })
                 .collect();
             if result.len() == 0 {
@@ -419,6 +424,7 @@ impl<'a> Iterator for IssueRecordIter<'a> {
                     hash: self.repository.config.encoding.decode(r.file_name().to_str().unwrap().as_bytes()).unwrap(),
                     issue: self.issue.clone(),
                     repository: self.repository,
+                    actual_path: self.repository.issues_path().join(&self.issue).join(r.file_name()),
                 })
                 .collect();
             if result.len() == 0 {
@@ -474,6 +480,7 @@ pub struct Record<'a> {
     hash: Vec<u8>,
     issue: OsString,
     repository: &'a Repository,
+    actual_path: PathBuf,
 }
 
 /// Somethiing that can provide access to its underlying repository
@@ -580,11 +587,19 @@ impl<'a, S: AsRef<str>, R: Read, T: RecordTrait<Str=S, Read=R> + RepositoryProvi
 
 impl<'a> Record<'a> {
 
-    /// Returns path to the record
+    /// Returns path to the record, as it should be per repository's naming scheme
+    ///
+    /// The record MIGHT not be at this path as this is the path where
+    /// it SHOULD BE. The actual path can be retrieved using `actual_path()`
     pub fn path(&self) -> PathBuf {
         self.repository.issues_path.join(PathBuf::from(&self.issue)).join(self.encoded_hash())
     }
 
+    /// Returns an actual path to the record directory
+    pub fn actual_path(&self) -> &Path {
+        self.actual_path.as_path()
+    }
+
 
     /// Returns a record with filtered files
     pub fn filtered<F>(&'a self, filter: F) -> FilteredRecord<'a, <Record<'a> as RecordTrait>::Str,
@@ -626,13 +641,12 @@ impl<'a> RecordTrait for Record<'a> {
     }
 
     fn file_iter(&self) -> Self::Iter {
-        let path = self.path();
+        let path = self.actual_path();
         let glob_pattern = format!("{}/**/*", path.to_str().unwrap());
         RecordFileIterator {
             glob: glob::glob(&glob_pattern).expect("invalid glob pattern"),
-            repository: self.repository,
-            issue: self.issue.clone(),
-            record: self.encoded_hash(),
+            prefix: self.actual_path().into(),
+            phantom: PhantomData,
         }
     }
     fn issue_id(&self) -> Self::Str {
@@ -643,16 +657,14 @@ impl<'a> RecordTrait for Record<'a> {
 /// An iterator over files in a record
 pub struct RecordFileIterator<'a> {
     glob: glob::Paths,
-    repository: &'a Repository,
-    issue: OsString,
-    record: String,
+    prefix: PathBuf,
+    phantom: PhantomData<&'a ()>,
 }
 
 impl<'a> Iterator for RecordFileIterator<'a> {
     type Item = (String, fs::File);
 
     fn next(&mut self) -> Option<Self::Item> {
-        let prefix = self.repository.issues_path.join(PathBuf::from(&self.issue)).join(PathBuf::from(&self.record));
         loop {
             match self.glob.next() {
                 None => return None,
@@ -660,7 +672,7 @@ impl<'a> Iterator for RecordFileIterator<'a> {
                 Some(Err(_)) => continue,
                 Some(Ok(name)) => {
                     if name.is_file() {
-                        let stripped = String::from(name.strip_prefix(&prefix).unwrap().to_str().unwrap());
+                        let stripped = String::from(name.strip_prefix(&self.prefix).unwrap().to_str().unwrap());
                         #[cfg(windows)] // replace backslashes with slashes
                         let stripped = stripped.replace("\\", "/");
                         return Some((stripped, fs::File::open(name).unwrap()))
@@ -912,4 +924,36 @@ mod tests {
         assert_ne!(filtered.dynamically_hashed().encoded_hash(), record.encoded_hash());
     }
 
+    #[test]
+    fn record_outside_naming_scheme() {
+        let mut tmp = TempDir::new("sit").unwrap().into_path();
+        tmp.push(".sit");
+        let mut tmp1 = tmp.clone();
+        tmp1.pop();
+
+        let repo = Repository::new(&tmp).unwrap();
+        let issue = repo.new_issue().unwrap();
+        let _record1 = issue.new_record(vec![("z/a", &[2u8][..]), ("test", &[1u8][..])].into_iter(), false).unwrap();
+        let record2 = issue.new_record_in(&tmp1, vec![("a", &[2u8][..])].into_iter(), true).unwrap();
+
+        // lets test that record2 can iterate over correct files
+        let files: Vec<_> = record2.file_iter().collect();
+        assert_eq!(files.len(), 2); // a and .prev/...
+
+
+        // record2 can't be found as it is outside of the standard naming scheme
+        let records: Vec<Vec<_>> = issue.record_iter().unwrap().collect();
+        assert_eq!(records.len(), 1);
+        assert_eq!(records[0].len(), 1);
+
+        ::std::fs::rename(record2.actual_path(), record2.path()).unwrap();
+
+        // and now it can be
+        let records: Vec<Vec<_>> = issue.record_iter().unwrap().collect();
+        assert_eq!(records.len(), 2);
+        assert_eq!(records[0].len(), 1);
+        assert_eq!(records[0].len(), 1);
+
+    }
+
 }
diff --git a/sit-web/Cargo.toml b/sit-web/Cargo.toml
index fe61022..9ff22f6 100644
--- a/sit-web/Cargo.toml
+++ b/sit-web/Cargo.toml
@@ -9,6 +9,7 @@ license = "MIT/Apache-2.0"
 clap = "2.29"
 chrono = "0.4"
 tempfile = "2.2"
+tempdir = "0.3"
 config = { version = "0.8", features = ["json"] }
 serde = "1.0"
 serde_json = "1.0"
diff --git a/sit-web/src/main.rs b/sit-web/src/main.rs
index 3efe8e4..9ab8ff8 100644
--- a/sit-web/src/main.rs
+++ b/sit-web/src/main.rs
@@ -26,6 +26,8 @@ extern crate itertools;
 
 extern crate rayon;
 
+extern crate tempdir;
+
 #[macro_use] extern crate lazy_static;
 #[macro_use] extern crate rouille;
 extern crate mime_guess;
diff --git a/sit-web/src/webapp.rs b/sit-web/src/webapp.rs
index 0ad21d9..88ff4fe 100644
--- a/sit-web/src/webapp.rs
+++ b/sit-web/src/webapp.rs
@@ -65,6 +65,8 @@ use std::ffi::OsString;
 
 use rayon::prelude::*;
 
+use tempdir;
+
 fn path_to_response<P: Into<PathBuf>>(path: P) -> Response {
     let path: PathBuf = path.into();
     match get_mime_type_str(path.extension().unwrap_or(&OsString::new()).to_str().unwrap()) {
@@ -177,8 +179,12 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
 
            use sit_core::{Issue, Record};
            let mut issue = repo.issue_iter().unwrap().find(|i| i.id() == id).unwrap();
-           let _lock = issue.lock_exclusively().expect("can't lock issue");
-           let record = issue.new_record(files.into_iter(), link).expect("can't create record");
+
+           let tmp = tempdir::TempDir::new_in(repo.path(), "sit").unwrap();
+           let record_path = tmp.path();
+
+           let record = issue.new_record_in(record_path, files.into_iter(), link).expect("can't create record");
+
            for file in used_files {
              fs::remove_file(file).expect("can't remove file");
            }
@@ -224,7 +230,7 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
               } else {
                   use sit_core::repository::DynamicallyHashable;
                   let dynamically_hashed_record = record.dynamically_hashed();
-                  let mut file = fs::File::create(record.path().join(".signature"))
+                  let mut file = fs::File::create(record.actual_path().join(".signature"))
                                .expect("can't open signature file");
                  file.write(&output.stdout).expect("can't write signature file");
                  drop(file);
@@ -232,7 +238,7 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
                  let mut new_path = record.path();
                  new_path.pop();
                  new_path.push(&new_hash);
-                 fs::rename(record.path(), new_path).expect("can't rename record");
+                 fs::rename(record.actual_path(), new_path).expect("can't rename record");
                  return Response::json(&new_hash);
              }
 
diff --git a/sit/src/main.rs b/sit/src/main.rs
index c86f7c1..33c4659 100644
--- a/sit/src/main.rs
+++ b/sit/src/main.rs
@@ -365,7 +365,6 @@ fn main() {
                     exit(1);
                 },
                 Some(mut issue) => {
-                    let _lock = issue.lock_exclusively().expect("can't lock issue");
                     let files = matches.values_of("FILES").unwrap_or(clap::Values::default());
                     let types: Vec<_> = matches.value_of("type").unwrap().split(",").collect();
 
@@ -409,14 +408,17 @@ fn main() {
                         vec![].into_iter()
                     };
 
+                    let tmp = tempdir::TempDir::new_in(repo.path(), "sit").unwrap();
+                    let record_path = tmp.path();
+
                     let record = if !matches.is_present("no-timestamp") {
                         let mut f = tempfile::tempfile_in(repo.path()).expect("can't create a temporary file (.timestamp)");
                         let utc: DateTime<Utc> = Utc::now();
                         f.write(format!("{:?}", utc).as_bytes()).expect("can't write to a temporary file (.timestamp)");
                         f.seek(SeekFrom::Start(0)).expect("can't seek to the beginning of a temporary file (.timestamp)");
-                        issue.new_record(files.chain(type_files).chain(authorship_files).chain(vec![(String::from(".timestamp"), f)].into_iter()), true)
+                        issue.new_record_in(record_path, files.chain(type_files).chain(authorship_files).chain(vec![(String::from(".timestamp"), f)].into_iter()), true)
                     } else {
-                        issue.new_record(files.chain(type_files).chain(authorship_files), true)
+                        issue.new_record_in(record_path, files.chain(type_files).chain(authorship_files), true)
                     }.expect("can't create a record");
 
 
@@ -463,7 +465,7 @@ fn main() {
                         } else {
                             use sit_core::repository::DynamicallyHashable;
                             let dynamically_hashed_record = record.dynamically_hashed();
-                            let mut file = fs::File::create(record.path().join(".signature"))
+                            let mut file = fs::File::create(record.actual_path().join(".signature"))
                                 .expect("can't open signature file");
                             file.write(&output.stdout).expect("can't write signature file");
                             drop(file);
@@ -471,7 +473,7 @@ fn main() {
                             let mut new_path = record.path();
                             new_path.pop();
                             new_path.push(&new_hash);
-                            fs::rename(record.path(), new_path).expect("can't rename record");
+                            fs::rename(record.actual_path(), new_path).expect("can't rename record");
                             println!("{}", new_hash);
                             exit(0);
                         }
-- 
2.15.0

