From 399bdd87d1b8f084a4426d56553dda9425ab9c6a Mon Sep 17 00:00:00 2001
From: Yurii Rashkovskii <me@yrashk.com>
Date: Thu, 26 Jul 2018 21:32:25 +0700
Subject: [PATCH] Problem: `cfg` module doesn't really belong to sit-core

The main thought here is that `cfg` defines structures
that are used by code outside of `sit-core` (namely, `sit`
and `sit-web`).

Solution: move `cfg` to the `sit` crate
---
 Cargo.lock                   | 2 +-
 sit-core/Cargo.toml          | 2 --
 sit-core/src/lib.rs          | 1 -
 sit-web/Cargo.toml           | 2 +-
 sit-web/src/main.rs          | 2 +-
 sit-web/src/webapp.rs        | 4 +++-
 sit/Cargo.toml               | 6 +++++-
 {sit-core => sit}/src/cfg.rs | 0
 sit/src/command_items.rs     | 3 ++-
 sit/src/command_record.rs    | 2 +-
 sit/src/command_records.rs   | 3 ++-
 sit/src/command_reduce.rs    | 3 ++-
 sit/src/lib.rs               | 5 ++++-
 sit/src/main.rs              | 5 ++++-
 14 files changed, 26 insertions(+), 14 deletions(-)
 rename {sit-core => sit}/src/cfg.rs (100%)

diff --git a/Cargo.lock b/Cargo.lock
index 174dd0d..a2264a3 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1134,6 +1134,7 @@ dependencies = [
  "rayon 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "serde 1.0.43 (registry+https://github.com/rust-lang/crates.io-index)",
+ "serde_derive 1.0.43 (registry+https://github.com/rust-lang/crates.io-index)",
  "serde_json 1.0.16 (registry+https://github.com/rust-lang/crates.io-index)",
  "sit-core 0.5.0-pre",
  "tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1157,7 +1158,6 @@ dependencies = [
  "derive-error 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)",
  "digest 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "dunce 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
- "git2 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)",
  "include_dir 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)",
  "lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
diff --git a/sit-core/Cargo.toml b/sit-core/Cargo.toml
index 1e31b15..7369c50 100644
--- a/sit-core/Cargo.toml
+++ b/sit-core/Cargo.toml
@@ -23,7 +23,6 @@ sha-1 = { version = "0.7", optional = true }
 uuid = { version = "0.5", features = ["v4"], optional = true }
 memmap = { version = "0.6", optional = true}
 cesu8 = { version = "1.1", optional = true }
-git2 = { version = "0.7", optional = true, default-features = false }
 relative-path = "0.3"
 
 [dev-dependencies]
@@ -42,4 +41,3 @@ duktape-reducers = ["duktape", "cesu8"]
 duktape = []
 duktape-mmap = ["memmap"]
 windows7 = []
-git = ["git2"]
diff --git a/sit-core/src/lib.rs b/sit-core/src/lib.rs
index 6d0e51a..93e372c 100644
--- a/sit-core/src/lib.rs
+++ b/sit-core/src/lib.rs
@@ -55,4 +55,3 @@ pub mod reducers;
 pub use reducers::Reducer;
 #[cfg(feature = "duktape")]
 pub mod duktape;
-pub mod cfg;
diff --git a/sit-web/Cargo.toml b/sit-web/Cargo.toml
index 641c359..e20feeb 100644
--- a/sit-web/Cargo.toml
+++ b/sit-web/Cargo.toml
@@ -27,7 +27,7 @@ blake2 = "0.7"
 hex = "0.3"
 which = "2.0"
 thread_local = "0.3"
-sit-core = { path = "../sit-core", version = "0.5.0-pre", features = ["git"] }
+sit-core = { path = "../sit-core", version = "0.5.0-pre" }
 sit = { path = "../sit", version = "0.5.0-pre" }
 
 [build-dependencies]
diff --git a/sit-web/src/main.rs b/sit-web/src/main.rs
index ed76be5..0d21d35 100644
--- a/sit-web/src/main.rs
+++ b/sit-web/src/main.rs
@@ -18,7 +18,7 @@ extern crate serde_json;
 #[macro_use] extern crate serde_derive;
 
 extern crate config;
-use sit_core::cfg;
+use sit::cfg;
 
 #[cfg(unix)]
 extern crate xdg;
diff --git a/sit-web/src/webapp.rs b/sit-web/src/webapp.rs
index 195cf1e..1b41bb4 100644
--- a/sit-web/src/webapp.rs
+++ b/sit-web/src/webapp.rs
@@ -122,7 +122,9 @@ struct Config {
     readonly: bool,
 }
 
-pub fn start<A: ToSocketAddrs, MI: 'static + Send + Sync>(addr: A, config: sit_core::cfg::Configuration, repo: Repository<MI>, readonly: bool, overlays: Vec<&str>)
+use sit;
+
+pub fn start<A: ToSocketAddrs, MI: 'static + Send + Sync>(addr: A, config: sit::cfg::Configuration, repo: Repository<MI>, readonly: bool, overlays: Vec<&str>)
     where MI: sit_core::repository::ModuleIterator<PathBuf, sit_core::repository::Error> {
     let mut overlays: Vec<_> = overlays.iter().map(|o| PathBuf::from(o)).collect();
     let assets: PathBuf = repo.path().join("web").into();
diff --git a/sit/Cargo.toml b/sit/Cargo.toml
index 9f5b1dd..7629d1f 100644
--- a/sit/Cargo.toml
+++ b/sit/Cargo.toml
@@ -27,7 +27,9 @@ walkdir = "2.1"
 atty = "0.2"
 thread_local = "0.3"
 derive-error = "0.0"
-sit-core = { path = "../sit-core", version = "0.5.0-pre", features = ["git"] }
+git2 = { version = "0.7", optional = true, default-features = false }
+serde_derive = "1.0"
+sit-core = { path = "../sit-core", version = "0.5.0-pre" }
 
 [dev-dependencies]
 cli_test_dir = "0.1.5"
@@ -35,4 +37,6 @@ git2 = { version = "0.7", default-features = false }
 remove_dir_all = "0.5"
 
 [features]
+default = ["git"]
 windows7 = ["sit-core/windows7"]
+git = ["git2"]
\ No newline at end of file
diff --git a/sit-core/src/cfg.rs b/sit/src/cfg.rs
similarity index 100%
rename from sit-core/src/cfg.rs
rename to sit/src/cfg.rs
diff --git a/sit/src/command_items.rs b/sit/src/command_items.rs
index b290e7f..f44d93b 100644
--- a/sit/src/command_items.rs
+++ b/sit/src/command_items.rs
@@ -1,5 +1,6 @@
 use clap::ArgMatches;
-use sit_core::{self, reducers::duktape::DuktapeReducer, Repository, item::ItemReduction, cfg::Configuration};
+use sit_core::{self, reducers::duktape::DuktapeReducer, Repository, item::ItemReduction};
+use cfg::Configuration;
 use serde_json;
 use rayon::prelude::*;
 use super::get_named_expression;
diff --git a/sit/src/command_record.rs b/sit/src/command_record.rs
index 1db5ac0..842c2d9 100644
--- a/sit/src/command_record.rs
+++ b/sit/src/command_record.rs
@@ -3,7 +3,7 @@ use chrono::prelude::*;
 use clap::{self, ArgMatches};
 use dunce;
 use serde_json;
-use sit_core::cfg::{self, Configuration};
+use cfg::{self, Configuration};
 use sit_core::{
     record::{BoxedOrderedFiles, OrderedFiles},
     Item, Record, Repository,
diff --git a/sit/src/command_records.rs b/sit/src/command_records.rs
index 76dda6b..a4d5ff7 100644
--- a/sit/src/command_records.rs
+++ b/sit/src/command_records.rs
@@ -1,5 +1,6 @@
 use clap::ArgMatches;
-use sit_core::{Repository, Record, Item, cfg::Configuration, record::OrderedFiles};
+use sit_core::{Repository, Record, Item, record::OrderedFiles};
+use cfg::Configuration;
 use serde_json;
 use super::get_named_expression;
 use jmespath;
diff --git a/sit/src/command_reduce.rs b/sit/src/command_reduce.rs
index 31d2508..af9b0a5 100644
--- a/sit/src/command_reduce.rs
+++ b/sit/src/command_reduce.rs
@@ -1,5 +1,6 @@
 use clap::ArgMatches;
-use sit_core::{self, Repository, item::ItemReduction, cfg::Configuration};
+use sit_core::{self, Repository, item::ItemReduction};
+use cfg::Configuration;
 use serde_json;
 use super::get_named_expression;
 use jmespath;
diff --git a/sit/src/lib.rs b/sit/src/lib.rs
index c401068..0efc9b2 100644
--- a/sit/src/lib.rs
+++ b/sit/src/lib.rs
@@ -1,7 +1,10 @@
 extern crate sit_core;
 extern crate which;
+#[cfg(feature = "git")] extern crate git2;
+#[macro_use] extern crate serde_derive;
+extern crate serde_json;
 #[macro_use] extern crate derive_error;
 mod cli;
 mod module_iter;
-
+pub mod cfg;
 pub use module_iter::{ScriptModuleIterator, ScriptModule};
diff --git a/sit/src/main.rs b/sit/src/main.rs
index 81c8884..621a663 100644
--- a/sit/src/main.rs
+++ b/sit/src/main.rs
@@ -17,8 +17,8 @@ extern crate walkdir;
 extern crate yaml_rust;
 
 extern crate config;
-use sit_core::cfg;
 
+mod cfg;
 mod rebuild;
 use rebuild::rebuild_repository;
 mod command_config;
@@ -60,6 +60,9 @@ extern crate thread_local;
 
 #[macro_use] extern crate derive_error;
 
+#[cfg(feature = "git")] extern crate git2;
+#[macro_use] extern crate serde_derive;
+
 use std::collections::HashMap;
 pub fn get_named_expression<S: AsRef<str>, MI>(name: S, repo: &sit_core::Repository<MI>,
                                        repo_path: S, exprs: &HashMap<String, String>) -> Option<String> {
-- 
2.16.4

