From dbc35025925319d3b0578db1bc34dbf89aac0696 Mon Sep 17 00:00:00 2001
From: Yurii Rashkovskii <me@yrashk.com>
Date: Fri, 16 Feb 2018 07:55:42 +0700
Subject: [PATCH] Problem: sit-web's handling of errors is rudimentary

sit-web crashes a responding thread on just about any error (resulting
in HTTP 500).

In some cases this is fine (something truly unexpected happened,
especially I/O-wise), but often times it is not, in cases such as:

* Issue not found
* Invalid JMESPath expression

Solution: avoid crashing on the above errors

Also, handle some of these errors in the UI
---
 sit-web/src/webapp.rs                              | 45 ++++++++++++++++------
 .../webapp/src/dashboard-page/dashboard-page.html  | 37 +++++++++++++++++-
 2 files changed, 70 insertions(+), 12 deletions(-)

diff --git a/sit-web/src/webapp.rs b/sit-web/src/webapp.rs
index 150b8ba..1476bc7 100644
--- a/sit-web/src/webapp.rs
+++ b/sit-web/src/webapp.rs
@@ -100,7 +100,17 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
             use sit_core::issue::IssueReduction;
             let issues = repo.issue_iter().expect("can't list issues");
             let mut reducer = sit_core::reducers::duktape::DuktapeReducer::new(&repo).unwrap();
-            let issues_with_reducers: Vec<_> =  issues.into_iter().map(|i| (i, reducer.clone())) .collect();
+            let issues_with_reducers: Vec<_> =  issues.into_iter().map(|i| (i, reducer.clone())).collect();
+
+            let filter = match jmespath::compile(&filter_expr) {
+                Ok(filter) => filter,
+                _ => return Response::empty_400(),
+            };
+            let query = match jmespath::compile(&query_expr) {
+                Ok(query) => query,
+                _ => return Response::empty_400(),
+            };
+
             let result: Vec<_> =
             issues_with_reducers.into_par_iter()
                   .map(|(issue, mut reducer)| {
@@ -110,10 +120,8 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
                      sit_core::serde_json::to_string(&reduced).unwrap()
                   }).map(|json| {
                      let data = jmespath::Variable::from_json(&json).unwrap();
-                     let filter = jmespath::compile(&filter_expr).expect("can't compile filter expression");
                      let result = filter.search(&data).unwrap();
-                     if result.as_boolean().unwrap() {
-                        let query = jmespath::compile(&query_expr).expect("can't compile query expression");
+                     if result.is_boolean() && result.as_boolean().unwrap() {
                         Some(query.search(&data).unwrap())
                      } else {
                         None
@@ -127,8 +135,14 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
             use sit_core::issue::IssueReduction;
             use sit_core::Issue;
             let mut reducer = sit_core::reducers::duktape::DuktapeReducer::new(&repo).unwrap();
-            let query = jmespath::compile(&query_expr).expect("can't compile query expression");
-            let issue = repo.issue_iter().unwrap().find(|i| i.id() == id).unwrap();
+            let query = match jmespath::compile(&query_expr) {
+                Ok(query) => query,
+                _ => return Response::empty_400(),
+            };
+            let issue = match repo.issue_iter().unwrap().find(|i| i.id() == id) {
+                Some(issue) => issue,
+                _ => return Response::empty_404(),
+            };
             let reduced = issue.reduce_with_reducer(&mut reducer).unwrap();
             let json = sit_core::serde_json::to_string(&reduced).unwrap();
             let data = jmespath::Variable::from_json(&json).unwrap();
@@ -137,8 +151,14 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
         },
         (GET) (/api/issue/{id: String}/{record: String}/files) => {
             use sit_core::{Record, Issue};
-            let issue = repo.issue_iter().unwrap().find(|i| i.id() == id).unwrap();
-            let record = issue.record_iter().unwrap().flatten().find(|r| r.encoded_hash() == record).unwrap();
+            let issue = match repo.issue_iter().unwrap().find(|i| i.id() == id) {
+                Some(issue) => issue,
+                None => return Response::empty_404(),
+            };
+            let record = match issue.record_iter().unwrap().flatten().find(|r| r.encoded_hash() == record) {
+               Some(record) => record,
+               None => return Response::empty_404(),
+            };
             let files: Vec<_> = record.file_iter().map(|(name, _)| name).collect();
             Response::json(&files)
         },
@@ -148,6 +168,12 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
            Response::json(&issue.id())
         },
         (POST) (/api/issue/{id: String}/records) => {
+           use sit_core::{Issue, Record};
+           let mut issue = match repo.issue_iter().unwrap().find(|i| i.id() == id) {
+                Some(issue) => issue,
+                None => return Response::empty_404(),
+           };
+
            let mut multipart = get_multipart_input(&request).expect("multipart request");
            let mut files = vec![];
            let mut link = true;
@@ -177,9 +203,6 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
               }
            }
 
-           use sit_core::{Issue, Record};
-           let mut issue = repo.issue_iter().unwrap().find(|i| i.id() == id).unwrap();
-
            let tmp = tempdir::TempDir::new_in(repo.path(), "sit").unwrap();
            let record_path = tmp.path();
 
diff --git a/sit-web/webapp/src/dashboard-page/dashboard-page.html b/sit-web/webapp/src/dashboard-page/dashboard-page.html
index 2fa1d40..4e2ecb6 100644
--- a/sit-web/webapp/src/dashboard-page/dashboard-page.html
+++ b/sit-web/webapp/src/dashboard-page/dashboard-page.html
@@ -41,7 +41,15 @@
        </div>
 
         <iron-ajax auto url="/api/issues/{{ filter }}/{{ query }}" handle-as="json"
-                   last-response="{{ issues }}"></iron-ajax>
+                   last-response="{{ issues }}"
+                   on-error="handleError"
+                   on-response="handleResponse"></iron-ajax>
+       <template is="dom-if" if="[[ badQuery ]]">
+           <h1>Wrong query, check the syntax (<a href="http://jmespath.org/specification.html" target="_blank">JMESPath specification</a>).</h1>
+       </template>
+       <template is="dom-if" if="[[ emptyResult ]]">
+           <h1>No matches</h1>
+       </template>
        <div class="layout horizontal baseline wrap">
         <template is="dom-repeat" items="{{ issues }}">
             <sit-issue issue="{{item}}"></sit-issue>
@@ -67,6 +75,17 @@
                     namedFilters: {
                         type: Array,
                         computed: 'computeNamedFilters(config)'
+                    },
+                    issues: {
+                        type: Array,
+                    },
+                    badQuery: {
+                        type: Boolean,
+                        value: false,
+                    },
+                    emptyResult: {
+                        type: Boolean,
+                        computed: 'computeEmptyResult(issues, badQuery)'
                     }
                 }
             }
@@ -79,6 +98,13 @@
                     });
             }
 
+            computeEmptyResult(issues, badQuery) {
+                if (badQuery) {
+                    return false;
+                }
+                return (issues || []).length === 0;
+            }
+
             handleFilter() {
                 this.set("filter", this.filterQuery || "`true`");
                 window.history.pushState({}, null, `/search/${this.filterQuery}`);
@@ -101,6 +127,15 @@
                 this.query = "{id: id, summary: summary, state: state, comments: (comments || `[]`), merge_request: merge_request || false}";
             }
 
+            handleResponse(evt, req) {
+                this.set("badQuery", false);
+            }
+
+            handleError(evt, req) {
+                this.set("badQuery", true);
+            }
+
+
             ready() {
                 if (typeof this.filterQuery !== 'undefined') {
                     this.set("filter", this.filterQuery);
-- 
2.15.0

