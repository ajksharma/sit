From ffaee131fb5ce03d64b9744d106e2df7a962891a Mon Sep 17 00:00:00 2001
From: Yurii Rashkovskii <me@yrashk.com>
Date: Mon, 21 May 2018 00:46:14 -0700
Subject: [PATCH] Problem: reducing multiple items performance

While it's not terribly bad, it's not perfect.

Solution: don't clone DuktapeReducer unnecessarily

Previously, DuktapeReducer was cloned for every
item to be reduced. This is quite wasteful as every
clone operation has a non-zero cost.

However, when we're using Rayon, there's a limited
number of workers reducing items, so we can actually
clone enough of DuktapeReducers for every worker,
and simply reset each one of them (this is cheaper)
for every item reduction.

In a non-scientific test, reducing ~4,000 items went
from about 15 or so seconds to about 12 or so. That's
a 20% improvement.
---
 Cargo.lock                       | 27 +++++++++++++++++++++++++++
 sit-core/src/reducers/duktape.rs |  2 +-
 sit-web/Cargo.toml               |  1 +
 sit-web/src/main.rs              |  2 ++
 sit-web/src/webapp.rs            | 20 +++++++++++++-------
 sit/Cargo.toml                   |  1 +
 sit/src/command_items.rs         | 21 ++++++++++++++-------
 sit/src/main.rs                  |  2 ++
 8 files changed, 61 insertions(+), 15 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index caac6e3..49c536e 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1115,6 +1115,7 @@ dependencies = [
  "sit-core 0.4.0",
  "tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)",
  "tempfile 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "thread_local 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)",
  "which 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "xdg 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "yaml-rust 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1171,6 +1172,7 @@ dependencies = [
  "sit-core 0.4.0",
  "tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)",
  "tempfile 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "thread_local 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)",
  "which 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "xdg 2.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
@@ -1290,6 +1292,15 @@ dependencies = [
  "thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "thread_local"
+version = "0.3.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
+ "unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "threadpool"
 version = "1.7.1"
@@ -1392,6 +1403,14 @@ name = "unidecode"
 version = "0.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "unreachable"
+version = "1.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "url"
 version = "0.2.38"
@@ -1449,6 +1468,11 @@ name = "version_check"
 version = "0.1.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 
+[[package]]
+name = "void"
+version = "1.0.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+
 [[package]]
 name = "which"
 version = "2.0.0"
@@ -1658,6 +1682,7 @@ dependencies = [
 "checksum textwrap 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)" = "c0b59b6b4b44d867f1370ef1bd91bfb262bf07bf0ae65c202ea2fbc16153b693"
 "checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)" = "a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03"
 "checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)" = "8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5"
+"checksum thread_local 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)" = "279ef31c19ededf577bfd12dfae728040a21f635b06a24cd670ff510edd38963"
 "checksum threadpool 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)" = "e2f0c90a5f3459330ac8bc0d2f879c693bb7a2f59689c1083fc4ef83834da865"
 "checksum time 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)" = "a15375f1df02096fb3317256ce2cee6a1f42fc84ea5ad5fc8c421cfe40c73098"
 "checksum tiny_http 0.5.9 (registry+https://github.com/rust-lang/crates.io-index)" = "2f4d55c9a213880d1f0c89ded183f209c6e45b912ca6c7df6f93c163773572e1"
@@ -1672,6 +1697,7 @@ dependencies = [
 "checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)" = "8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc"
 "checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)" = "fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc"
 "checksum unidecode 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)" = "402bb19d8e03f1d1a7450e2bd613980869438e0666331be3e073089124aa1adc"
+"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)" = "382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56"
 "checksum url 0.2.38 (registry+https://github.com/rust-lang/crates.io-index)" = "cbaa8377a162d88e7d15db0cf110c8523453edcbc5bc66d2b6fffccffa34a068"
 "checksum url 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "f808aadd8cfec6ef90e4a14eb46f24511824d1ac596b9682703c87056c8678b7"
 "checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f"
@@ -1680,6 +1706,7 @@ dependencies = [
 "checksum vcpkg 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)" = "7ed0f6789c8a85ca41bbc1c9d175422116a9869bd1cf31bb08e1493ecce60380"
 "checksum vec_map 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)" = "887b5b631c2ad01628bbbaa7dd4c869f80d3186688f8d0b6f58774fbe324988c"
 "checksum version_check 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "6b772017e347561807c1aa192438c5fd74242a670a6cffacc40f2defd1dc069d"
+"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)" = "6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d"
 "checksum which 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)" = "49c4f580e93079b70ac522e7bdebbe1568c8afa7d8d05ee534ee737ca37d2f51"
 "checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)" = "167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a"
 "checksum winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)" = "04e3bd221fcbe8a271359c04f21a76db7d0c6028862d1bb5512d85e1e2eb5bb3"
diff --git a/sit-core/src/reducers/duktape.rs b/sit-core/src/reducers/duktape.rs
index f7a9587..acae402 100644
--- a/sit-core/src/reducers/duktape.rs
+++ b/sit-core/src/reducers/duktape.rs
@@ -302,7 +302,7 @@ impl<'a, R: Record> DuktapeReducer<'a, R> {
     /// Very useful for re-using the same set of reducers for
     /// multiple items, helps avoiding re-reading and re-compiling
     /// reducer functions every time.
-    pub fn reset_state(&self) {
+    pub fn reset_state(&mut self) {
         for i in 0..self.reducers {
             unsafe {
                 duktape::duk_push_object(self.context);
diff --git a/sit-web/Cargo.toml b/sit-web/Cargo.toml
index b49ff6b..b4905af 100644
--- a/sit-web/Cargo.toml
+++ b/sit-web/Cargo.toml
@@ -25,6 +25,7 @@ digest = "0.7"
 blake2 = "0.7"
 hex = "0.3"
 which = "2.0"
+thread_local = "0.3"
 sit-core = { path = "../sit-core", version = "0.4.0", features = ["git"] }
 
 [build-dependencies]
diff --git a/sit-web/src/main.rs b/sit-web/src/main.rs
index ebb3061..ca97b6b 100644
--- a/sit-web/src/main.rs
+++ b/sit-web/src/main.rs
@@ -43,6 +43,8 @@ extern crate which;
 use std::ffi::OsString;
 use which::which;
 
+extern crate thread_local;
+
 pub fn gnupg(config: &cfg::Configuration) -> Result<OsString, which::Error> {
     let program = match config.signing.gnupg {
             Some(ref command) => command.clone().into(),
diff --git a/sit-web/src/webapp.rs b/sit-web/src/webapp.rs
index d8af47c..1650de4 100644
--- a/sit-web/src/webapp.rs
+++ b/sit-web/src/webapp.rs
@@ -64,7 +64,7 @@ use std::path::PathBuf;
 use std::fs;
 use std::net::ToSocketAddrs;
 
-use sit_core::{Repository, record::OrderedFiles};
+use sit_core::{Repository, reducers::duktape::DuktapeReducer, record::OrderedFiles};
 use std::io::Cursor;
 
 use mime_guess::get_mime_type_str;
@@ -79,6 +79,10 @@ use hex;
 
 use serde_json;
 
+use std::sync::{Arc, Mutex};
+use std::cell::RefCell;
+use thread_local::ThreadLocal;
+
 fn path_to_response<P: Into<PathBuf>>(path: P, request: &Request) -> Response {
     let path: PathBuf = path.into();
 
@@ -139,9 +143,9 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
         (GET) (/api/items/{filter_expr: String}/{query_expr: String}) => {
             use jmespath;
             use sit_core::item::ItemReduction;
-            let items = repo.item_iter().expect("can't list items");
-            let mut reducer = sit_core::reducers::duktape::DuktapeReducer::new(&repo).unwrap();
-            let items_with_reducers: Vec<_> =  items.into_iter().map(|i| (i, reducer.clone())).collect();
+            let items: Vec<_> = repo.item_iter().expect("can't list items").collect();
+            let mut reducer = Arc::new(Mutex::new(sit_core::reducers::duktape::DuktapeReducer::new(&repo).unwrap()));
+            let tl_reducer: ThreadLocal<RefCell<DuktapeReducer<sit_core::repository::Record>>> = ThreadLocal::new();
 
             let filter_defined = filter_expr != "";
             let filter = if filter_defined {
@@ -158,9 +162,11 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
             };
 
             let result: Vec<_> =
-            items_with_reducers.into_par_iter()
-                  .map(|(item, mut reducer)| {
-                     item.reduce_with_reducer(&mut reducer).unwrap()
+            items.into_par_iter()
+                  .map(|item| {
+                     let mut reducer = tl_reducer.get_or(|| Box::new(RefCell::new(reducer.lock().unwrap().clone()))).borrow_mut();
+                     reducer.reset_state();
+                     item.reduce_with_reducer(&mut *reducer).unwrap()
                   }).map(|json| {
                      let data = jmespath::Variable::from(serde_json::Value::Object(json));
                      let result = if filter_defined {
diff --git a/sit/Cargo.toml b/sit/Cargo.toml
index 4ef22c6..e458559 100644
--- a/sit/Cargo.toml
+++ b/sit/Cargo.toml
@@ -24,6 +24,7 @@ question = "0.2"
 dunce = "0.1"
 which = "2.0"
 atty = "0.2"
+thread_local = "0.3"
 sit-core = { path = "../sit-core", version = "0.4.0", features = ["git"] }
 
 [dev-dependencies]
diff --git a/sit/src/command_items.rs b/sit/src/command_items.rs
index 3ba4af2..7e343f6 100644
--- a/sit/src/command_items.rs
+++ b/sit/src/command_items.rs
@@ -1,10 +1,14 @@
 use clap::ArgMatches;
-use sit_core::{self, Repository, item::ItemReduction, cfg::Configuration};
+use sit_core::{self, reducers::duktape::DuktapeReducer, Repository, item::ItemReduction, cfg::Configuration};
 use serde_json;
 use rayon::prelude::*;
 use super::get_named_expression;
 use jmespath;
 
+use std::sync::{Arc, Mutex};
+use std::cell::RefCell;
+use thread_local::ThreadLocal;
+
 pub fn command(matches: &ArgMatches, repo: &Repository, config: Configuration) -> i32 {
     let items: Vec<_> = repo.item_iter().expect("can't list items").collect();
 
@@ -25,11 +29,14 @@ pub fn command(matches: &ArgMatches, repo: &Repository, config: Configuration) -
     let filter = jmespath::compile(&filter_expr).expect("can't compile filter expression");
     let query = jmespath::compile(&query_expr).expect("can't compile query expression");
 
-    let reducer = sit_core::reducers::duktape::DuktapeReducer::new(&repo).unwrap();
-    let items_with_reducers: Vec<_> = items.into_iter().map(|i| (i, reducer.clone())).collect();
-    items_with_reducers.into_par_iter()
-        .map(|(item, mut reducer)| {
-            let result = item.reduce_with_reducer(&mut reducer).expect("can't reduce item");
+    let tl_reducer : ThreadLocal<RefCell<DuktapeReducer<sit_core::repository::Record>>> = ThreadLocal::new();
+    let reducer = Arc::new(Mutex::new(DuktapeReducer::new(&repo).unwrap()));
+
+    items.into_par_iter()
+        .map(|item| {
+            let mut reducer = tl_reducer.get_or(|| Box::new(RefCell::new(reducer.lock().unwrap().clone()))).borrow_mut();
+            reducer.reset_state();
+            let result = item.reduce_with_reducer(&mut *reducer).expect("can't reduce item");
             let data = jmespath::Variable::from(serde_json::Value::Object(result));
             let result = if filter_defined {
                 filter.search(&data).unwrap().as_boolean().unwrap()
@@ -51,5 +58,5 @@ pub fn command(matches: &ArgMatches, repo: &Repository, config: Configuration) -
         .for_each(|view| {
             println!("{}", view);
         });
-    return 0;
+    0
 }
diff --git a/sit/src/main.rs b/sit/src/main.rs
index 799577a..4d13bb9 100644
--- a/sit/src/main.rs
+++ b/sit/src/main.rs
@@ -49,6 +49,8 @@ extern crate dunce;
 extern crate which;
 use which::which;
 
+extern crate thread_local;
+
 use std::collections::HashMap;
 pub fn get_named_expression<S: AsRef<str>>(name: S, repo: &sit_core::Repository,
                                        repo_path: S, exprs: &HashMap<String, String>) -> Option<String> {
-- 
2.16.2

