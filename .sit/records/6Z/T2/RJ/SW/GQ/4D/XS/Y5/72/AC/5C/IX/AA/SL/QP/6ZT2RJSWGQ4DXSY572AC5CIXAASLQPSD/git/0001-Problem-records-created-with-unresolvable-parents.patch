From c4739bdfcd325338f7cdaabec05d93a0c0c5c189 Mon Sep 17 00:00:00 2001
From: Yurii Rashkovskii <me@yrashk.com>
Date: Mon, 12 Feb 2018 16:41:51 +0700
Subject: [PATCH] Problem: records created with unresolvable parents

This happens in cases like current implementation of
signing, where a record directory is renamed in-place
after the content has been signed.

However, if any other process is attempting to add
another record exactly at the same time, they chance
getting a wrong parent record's hash, making it
unresolvable.

Solution: allow explicit locking of an issue
especially where it is known that such things might happen.
---
 Cargo.lock                 |  11 +++++
 sit-core/Cargo.toml        |   1 +
 sit-core/src/issue.rs      |  16 ++++++-
 sit-core/src/lib.rs        |   3 ++
 sit-core/src/lock.rs       | 110 +++++++++++++++++++++++++++++++++++++++++++++
 sit-core/src/repository.rs |   6 +++
 sit-web/src/webapp.rs      |   3 +-
 sit/src/main.rs            |   3 +-
 8 files changed, 149 insertions(+), 4 deletions(-)
 create mode 100644 sit-core/src/lock.rs

diff --git a/Cargo.lock b/Cargo.lock
index be03835..1c25e22 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -338,6 +338,15 @@ dependencies = [
  "miniz-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)",
 ]
 
+[[package]]
+name = "fs2"
+version = "0.4.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "libc 0.2.36 (registry+https://github.com/rust-lang/crates.io-index)",
+ "winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
+]
+
 [[package]]
 name = "fs_extra"
 version = "1.1.0"
@@ -907,6 +916,7 @@ dependencies = [
  "data-encoding 2.1.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "derive-error 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)",
  "digest 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)",
  "glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)",
  "include_dir 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)",
  "lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1279,6 +1289,7 @@ dependencies = [
 "checksum fake-simd 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)" = "e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed"
 "checksum filetime 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)" = "714653f3e34871534de23771ac7b26e999651a0a228f47beb324dfdf1dd4b10f"
 "checksum flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)" = "e6234dd4468ae5d1e2dbb06fe2b058696fdc50a339c68a393aefbf00bc81e423"
+"checksum fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)" = "9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213"
 "checksum fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)" = "5f2a4a2034423744d2cc7ca2068453168dcdb82c438419e639a26bd87839c674"
 "checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82"
 "checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)" = "3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7"
diff --git a/sit-core/Cargo.toml b/sit-core/Cargo.toml
index 98d9a1c..7fb160f 100644
--- a/sit-core/Cargo.toml
+++ b/sit-core/Cargo.toml
@@ -18,6 +18,7 @@ data-encoding = "2.1"
 glob = "0.2"
 lazy_static = "1.0"
 tini = "0.2.0"
+fs2 = "0.4"
 blake2 = { version = "0.7", optional = true }
 sha-1 = { version = "0.7", optional = true }
 uuid = { version = "0.5", features = ["v4"], optional = true }
diff --git a/sit-core/src/issue.rs b/sit-core/src/issue.rs
index cd635f8..2625ffa 100644
--- a/sit-core/src/issue.rs
+++ b/sit-core/src/issue.rs
@@ -2,7 +2,7 @@
 
 use serde_json::{Map, Value};
 
-use super::Reducer;
+use super::{Lock, Reducer};
 
 #[derive(Debug, Error)]
 pub enum ReductionError<Err: ::std::error::Error + ::std::fmt::Debug> {
@@ -25,6 +25,10 @@ pub trait Issue: Sized {
     type Records : IntoIterator<Item=Self::Record>;
     /// Iterator over lists of records
     type RecordIter : Iterator<Item=Self::Records>;
+    /// Lock type
+    type Lock : Lock;
+    /// Lock error
+    type LockError : ::std::error::Error + ::std::fmt::Debug;
     /// Issue must have an ID, ideally human-readable
     fn id(&self) -> &str;
     /// Iterates through the tree of records
@@ -36,7 +40,15 @@ pub trait Issue: Sized {
     fn new_record<S: AsRef<str>, R: ::std::io::Read,
                   I: Iterator<Item=(S, R)>>(&self, iter: I, link_parents: bool)
        -> Result<Self::Record, Self::Error>;
-
+    /// Creates and returns an exclusive lock.
+    ///
+    /// Blocks if there's already a lock in place.
+    ///
+    /// This is particularly useful for some elaborate
+    /// scenarios where records can be renamed at place (signing), and, therefore,
+    /// further addition of records can be erro-prone (picking up a parent
+    /// hash that is not going to be valid anymore)
+    fn lock_exclusively(&mut self) -> Result<Self::Lock, Self::LockError>;
 }
 
 /// [`Issue`] trait extension that defines and implements default reduction algorithms
diff --git a/sit-core/src/lib.rs b/sit-core/src/lib.rs
index 486aa8a..0b8a968 100644
--- a/sit-core/src/lib.rs
+++ b/sit-core/src/lib.rs
@@ -20,6 +20,7 @@ extern crate glob;
 extern crate data_encoding;
 #[macro_use] extern crate lazy_static;
 extern crate tini;
+extern crate fs2;
 
 // Hashing
 extern crate digest;
@@ -48,3 +49,5 @@ pub use reducers::Reducer;
 #[cfg(feature = "duktape")]
 pub mod duktape;
 pub mod cfg;
+pub mod lock;
+pub use lock::{FileLock, Lock};
diff --git a/sit-core/src/lock.rs b/sit-core/src/lock.rs
new file mode 100644
index 0000000..c3683a7
--- /dev/null
+++ b/sit-core/src/lock.rs
@@ -0,0 +1,110 @@
+//! Provides `Lock` trait
+
+/// Primitive lock trait
+pub trait Lock {
+    /// Unlocks the lock
+    fn unlock(self);
+}
+
+use std::io;
+use std::fs::{self, File};
+use std::path::{Path, PathBuf};
+
+use fs2::FileExt;
+
+/// File-based lock
+pub struct FileLock(PathBuf, File);
+
+impl FileLock {
+    /// Returns a new lock
+    pub fn new<P: AsRef<Path>>(path: P) -> Result<Self, io::Error>  {
+        let file = File::create(path.as_ref())?;
+        file.lock_exclusive()?;
+        Ok(FileLock(path.as_ref().into(), file))
+    }
+}
+
+impl Drop for FileLock {
+    fn drop(&mut self) {
+        let _ = fs::remove_file(&self.0);
+    }
+}
+
+impl Lock for FileLock {
+    fn unlock(self) {
+        let _ = self.1.unlock();
+    }
+}
+
+#[cfg(test)]
+mod tests {
+
+    use super::*;
+    use tempdir::TempDir;
+
+    #[test]
+    fn lock_cleanup() {
+        let tmp = TempDir::new("sit").unwrap();
+        let path = tmp.path().join("test_lock");
+        let lock = FileLock::new(&path).unwrap();
+        assert!(path.is_file());
+        lock.unlock();
+        assert!(!path.is_file());
+    }
+
+
+    #[test]
+    fn lock_drop_cleanup() {
+        let tmp = TempDir::new("sit").unwrap();
+        let path = tmp.path().join("test_lock");
+        let lock = FileLock::new(&path).unwrap();
+        assert!(path.is_file());
+        drop(lock);
+        assert!(!path.is_file());
+    }
+
+    #[test]
+    fn lock_wait() {
+        use std::thread;
+        let tmp = TempDir::new("sit").unwrap();
+        let path = tmp.path().join("test_lock");
+        let lock = FileLock::new(&path).unwrap();
+        assert!(path.is_file());
+        let path_clone = path.clone();
+        let thread = thread::spawn(move || {
+            FileLock::new(path_clone).unwrap()
+        });
+        thread::sleep(::std::time::Duration::from_millis(200));
+        // unlock the first lock
+        thread::spawn(move || {
+            lock.unlock();
+        });
+        // this should be reachable
+        let lock2 = thread.join().unwrap();
+        lock2.unlock();
+        assert!(!path.is_file());
+    }
+
+    #[test]
+    fn lock_drop_wait() {
+        use std::thread;
+        let tmp = TempDir::new("sit").unwrap();
+        let path = tmp.path().join("test_lock");
+        let lock = FileLock::new(&path).unwrap();
+        assert!(path.is_file());
+        let path_clone = path.clone();
+        let thread = thread::spawn(move || {
+            FileLock::new(path_clone).unwrap()
+        });
+        thread::sleep(::std::time::Duration::from_millis(200));
+        // drop the first lock
+        thread::spawn(move || {
+            drop(lock)
+        });
+        // this should be reachable
+        let lock2 = thread.join().unwrap();
+        lock2.unlock();
+        assert!(!path.is_file());
+    }
+
+}
\ No newline at end of file
diff --git a/sit-core/src/repository.rs b/sit-core/src/repository.rs
index e682abd..e5f573b 100644
--- a/sit-core/src/repository.rs
+++ b/sit-core/src/repository.rs
@@ -355,6 +355,12 @@ impl<'a> IssueTrait for Issue<'a> {
             repository: self.repository,
         })
     }
+    type Lock = super::FileLock;
+    type LockError = ::std::io::Error;
+
+    fn lock_exclusively(&mut self) -> Result<Self::Lock, Self::LockError> {
+        super::FileLock::new(self.repository.issues_path().join(self.id()).join(".lock"))
+    }
 }
 
 /// An iterator over records in an issue
diff --git a/sit-web/src/webapp.rs b/sit-web/src/webapp.rs
index 2048965..0ad21d9 100644
--- a/sit-web/src/webapp.rs
+++ b/sit-web/src/webapp.rs
@@ -176,7 +176,8 @@ pub fn start<A: ToSocketAddrs>(addr: A, config: sit_core::cfg::Configuration, re
            }
 
            use sit_core::{Issue, Record};
-           let issue = repo.issue_iter().unwrap().find(|i| i.id() == id).unwrap();
+           let mut issue = repo.issue_iter().unwrap().find(|i| i.id() == id).unwrap();
+           let _lock = issue.lock_exclusively().expect("can't lock issue");
            let record = issue.new_record(files.into_iter(), link).expect("can't create record");
            for file in used_files {
              fs::remove_file(file).expect("can't remove file");
diff --git a/sit/src/main.rs b/sit/src/main.rs
index 49bcf2c..c86f7c1 100644
--- a/sit/src/main.rs
+++ b/sit/src/main.rs
@@ -364,7 +364,8 @@ fn main() {
                     println!("Issue {} not found", id);
                     exit(1);
                 },
-                Some(issue) => {
+                Some(mut issue) => {
+                    let _lock = issue.lock_exclusively().expect("can't lock issue");
                     let files = matches.values_of("FILES").unwrap_or(clap::Values::default());
                     let types: Vec<_> = matches.value_of("type").unwrap().split(",").collect();
 
-- 
2.15.0

