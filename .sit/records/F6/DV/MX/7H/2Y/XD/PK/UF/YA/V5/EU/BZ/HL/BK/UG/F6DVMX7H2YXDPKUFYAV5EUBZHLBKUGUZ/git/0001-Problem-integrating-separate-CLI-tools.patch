From eb28059cb7df309f9593ebaab3147ba9424632dd Mon Sep 17 00:00:00 2001
From: Yurii Rashkovskii <me@yrashk.com>
Date: Thu, 5 Apr 2018 15:45:15 +0200
Subject: [PATCH] Problem: integrating separate CLI tools

Currently, tools that are not embedded into `sit`
itself have a different invocation convention.

For example, sit's web interface is `sit-web`.
However, embedded subcommands are invoked as `sit record`
(for example).

Solution: implement a scheme similar to git, where an unknown
subcommand is attempted as an external subcommand and if the spawning
is unsuccessful, the subcommand is matched against built-in
commands to see if any suggestion can be produced.

This way, `sit-web` can be invoked as `sit web`.

This change required an upgrade of `clap` to 2.31.2 which enabled
this behaviour.
---
 Cargo.lock      | 17 ++++++++++-------
 sit/src/main.rs | 40 ++++++++++++++++++++++++++++++++++------
 2 files changed, 44 insertions(+), 13 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index ca532a1..5a02892 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -13,8 +13,11 @@ dependencies = [
 
 [[package]]
 name = "ansi_term"
-version = "0.10.2"
+version = "0.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
+dependencies = [
+ "winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)",
+]
 
 [[package]]
 name = "arrayref"
@@ -190,10 +193,10 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 
 [[package]]
 name = "clap"
-version = "2.29.4"
+version = "2.31.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 dependencies = [
- "ansi_term 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "atty 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)",
  "bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)",
  "strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -980,7 +983,7 @@ name = "sit"
 version = "0.3.0"
 dependencies = [
  "chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "clap 2.29.4 (registry+https://github.com/rust-lang/crates.io-index)",
+ "clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "config 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1028,7 +1031,7 @@ version = "0.3.0"
 dependencies = [
  "blake2 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
- "clap 2.29.4 (registry+https://github.com/rust-lang/crates.io-index)",
+ "clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "config 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "digest 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -1359,7 +1362,7 @@ dependencies = [
 [metadata]
 "checksum adler32 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)" = "6cbd0b9af8587c72beadc9f72d35b9fbb070982c9e6203e46e93f10df25f8f45"
 "checksum aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)" = "ca972c2ea5f742bfce5687b9aef75506a764f61d37f8f649047846a9686ddb66"
-"checksum ansi_term 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)" = "6b3568b48b7cefa6b8ce125f9bb4989e52fbcc29ebea88df04cc7c5f12f70455"
+"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)" = "ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b"
 "checksum arrayref 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)" = "0fd1479b7c29641adbd35ff3b5c293922d696a92f25c8c975da3e0acbc87258f"
 "checksum arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)" = "a1e964f9e24d588183fcb43503abda40d288c8657dfc27311516ce2f05675aef"
 "checksum ascii 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)" = "3ae7d751998c189c1d4468cf0a39bb2eae052a9c58d50ebb3b9591ee3813ad50"
@@ -1384,7 +1387,7 @@ dependencies = [
 "checksum chrono 0.2.25 (registry+https://github.com/rust-lang/crates.io-index)" = "9213f7cd7c27e95c2b57c49f0e69b1ea65b27138da84a170133fd21b07659c00"
 "checksum chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)" = "7c20ebe0b2b08b0aeddba49c609fe7957ba2e33449882cb186a180bc60682fa9"
 "checksum chunked_transfer 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)" = "498d20a7aaf62625b9bf26e637cf7736417cde1d0c99f1d04d1170229a85cf87"
-"checksum clap 2.29.4 (registry+https://github.com/rust-lang/crates.io-index)" = "7b8f59bcebcfe4269b09f71dab0da15b355c75916a8f975d3876ce81561893ee"
+"checksum clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)" = "f0f16b89cbb9ee36d87483dc939fe9f1e13c05898d56d7b230a0d4dff033a536"
 "checksum config 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)" = "e595d1735d8ab6b04906bbdcfc671cce2a5e609b6f8e92865e67331cc2f41ba4"
 "checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)" = "8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e"
 "checksum crc 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "bd5d02c0aac6bd68393ed69e00bbc2457f3e89075c6349db7189618dc4ddc1d7"
diff --git a/sit/src/main.rs b/sit/src/main.rs
index 3994005..f4c9be0 100644
--- a/sit/src/main.rs
+++ b/sit/src/main.rs
@@ -59,15 +59,15 @@ fn get_named_expression<S: AsRef<str>>(name: S, repo: &sit_core::Repository,
 }
 
 fn main() {
-    exit(main_with_result());
+    exit(main_with_result(true));
 }
 
-fn main_with_result() -> i32 {
+fn main_with_result(allow_external_subcommands: bool) -> i32 {
     #[cfg(unix)]
     let xdg_dir = xdg::BaseDirectories::with_prefix("sit").unwrap();
 
     let cwd = env::current_dir().expect("can't get current working directory");
-    let matches = App::new("SIT")
+    let mut app = App::new("SIT")
         .version(crate_version!())
         .about(crate_description!())
         .settings(&[clap::AppSettings::ColoredHelp, clap::AppSettings::ColorAuto])
@@ -260,9 +260,13 @@ fn main_with_result() -> i32 {
                      .long("query")
                      .short("q")
                      .takes_value(true)
-                     .help("JMESPath query (none by default)")))
-        .get_matches();
+                     .help("JMESPath query (none by default)")));
 
+    if allow_external_subcommands {
+        app = app.setting(clap::AppSettings::AllowExternalSubcommands);
+    }
+
+    let matches = app.clone().get_matches();
 
     #[cfg(unix)]
     let default_config = PathBuf::from(xdg_dir.place_config_file("config.json").expect("can't create config directory"));
@@ -334,9 +338,11 @@ fn main_with_result() -> i32 {
                     repo.populate_default_files().expect("can't populate default files");
                 }
                 eprintln!("Repository {} initialized", dot_sit_str);
+                return 0;
             }
             Err(sit_core::RepositoryError::AlreadyExists) => {
                 eprintln!("Repository {} already exists", dot_sit_str);
+                return 0;
             },
             Err(err) => {
                 eprintln!("Error while initializing repository {}: {}", dot_sit_str, err);
@@ -347,6 +353,7 @@ fn main_with_result() -> i32 {
         rebuild_repository(matches.value_of("SRC").unwrap(),
                            matches.value_of("DEST").unwrap(),
                            matches.value_of("on-record"));
+        return 0;
     } else {
         let repo = matches.value_of("repository").map(sit_core::Repository::open)
             .or_else(|| Some(sit_core::Repository::find_in_or_above(".sit",&working_dir)))
@@ -355,8 +362,10 @@ fn main_with_result() -> i32 {
 
         if let Some(_) = matches.subcommand_matches("populate-files") {
             repo.populate_default_files().expect("can't populate default files");
+            return 0;
         } else if let Some(_) = matches.subcommand_matches("path") {
             println!("{}", repo.path().to_str().unwrap());
+            return 0;
         } else if let Some(matches) = matches.subcommand_matches("issue") {
             let issue = (if matches.value_of("id").is_none() {
                 repo.new_issue()
@@ -364,6 +373,7 @@ fn main_with_result() -> i32 {
                 repo.new_named_issue(matches.value_of("id").unwrap())
             }).expect("can't create an issue");
             println!("{}", issue.id());
+            return 0;
         }
 
         if let Some(matches) = matches.subcommand_matches("issues") {
@@ -412,6 +422,7 @@ fn main_with_result() -> i32 {
                 .for_each(|view| {
                     println!("{}", view);
                 });
+                return 0;
         }
 
         if let Some(matches) = matches.subcommand_matches("record") {
@@ -543,6 +554,7 @@ fn main_with_result() -> i32 {
                     println!("{}", record.encoded_hash());
                 }
             }
+            return 0;
         }
 
         if let Some(matches) = matches.subcommand_matches("records") {
@@ -649,6 +661,7 @@ fn main_with_result() -> i32 {
                     }
                 }
             }
+            return 0;
         }
 
         if let Some(matches) = matches.subcommand_matches("reduce") {
@@ -680,17 +693,32 @@ fn main_with_result() -> i32 {
 
                 }
             }
+            return 0;
         }
 
         if let Some(matches) = matches.subcommand_matches("config") {
             if matches.value_of("kind").unwrap() == "repository" {
                 command_config::command(repo.config(), matches.value_of("query"));
             }
+            return 0;
         }
 
 
     }
 
-    return 0;
+    let (subcommand, args) = matches.subcommand();
+    let mut command = ::std::process::Command::new(format!("sit-{}", subcommand));
+    if let Some(args) = args {
+        command.args(args.values_of_lossy("").unwrap_or(vec![]));
+    }
+    match command.spawn() {
+        Err(_) => {
+            return main_with_result(false);
+        },
+        Ok(mut process) => {
+            let result = process.wait().unwrap();
+            return result.code().unwrap();
+        },
+    };
 
 }
-- 
2.15.0

